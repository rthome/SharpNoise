using System;
using System.Threading;

namespace SharpNoise.Modules
{
    /// <summary>
    /// Noise module that caches the last output value generated by a source
    /// module.
    /// </summary>
    /// <remarks>
    /// If an application passes an input value to the <see cref="GetValue"/> method that
    /// differs from the previously passed-in input value, this noise module
    /// instructs the source module to calculate the output value.  This
    /// value, as well as the ( x, y, z ) coordinates of the input
    /// value, are stored (cached) in this noise module.
    ///
    /// If the application passes an input value to the <see cref="GetValue"/> method
    /// that is equal to the previously passed-in input value, this noise
    /// module returns the cached output value without having the source
    /// module recalculate the output value.
    ///
    /// If an application passes a new source module to the <see cref="SetSourceModule"/>
    /// method, the cache is invalidated.
    ///
    /// Caching a noise module is useful if it is used as a source module for
    /// multiple noise modules.  If a source module is not cached, the source
    /// module will redundantly calculate the same output value once for each
    /// noise module in which it is included.
    ///
    /// This noise module requires one source module.
    /// </remarks>
    [Serializable]
    public class Cache : Module
    {
        class CacheEntry
        {
            public double x;
            public double y;
            public double z;
            public double value;
        }

        [NonSerialized]
        ThreadLocal<CacheEntry> localCacheEntry;

        /// <summary>
        /// Gets or sets the first source module
        /// </summary>
        public Module Source0
        {
            get { return GetSourceModule(0); }
            set { SourceModules[0] = value; }
        }

        /// <summary>
        /// Constructor.
        /// </summary>
        public Cache()
            : base(1)
        {
            localCacheEntry = new ThreadLocal<CacheEntry>();
        }

        public void ResetCache()
        {
            if (localCacheEntry != null)
                localCacheEntry.Dispose();
            localCacheEntry = new ThreadLocal<CacheEntry>();
        }

        /// <summary>
        /// See the documentation on the base class.
        /// <seealso cref="Module"/>
        /// </summary>
        /// <param name="x">X coordinate</param>
        /// <param name="y">Y coordinate</param>
        /// <param name="z">Z coordinate</param>
        /// <returns>Returns the computed value</returns>
        public override double GetValue(double x, double y, double z)
        {
            CacheEntry cache = localCacheEntry.Value;

            if (cache != null)
            {
                if (cache.x == x && cache.y == y && cache.z == z)
                    return cache.value;
            }
            else
            {
                localCacheEntry.Value = cache = new CacheEntry();
            }

            cache.value = SourceModules[0].GetValue(x, y, z);
            cache.x = x;
            cache.y = y;
            cache.z = z;

            return cache.value;
        }
    }
}
