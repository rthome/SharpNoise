using System;
using System.Threading.Tasks;

namespace SharpNoise
{
    /// <summary>
    /// Implements a noise cube, a 3-dimensional array of floating-point
    /// values.
    /// </summary>
    /// <remarks>
    /// A noise cube is designed to store coherent-noise values generated by a
    /// noise module, although it can store values from any source.
    ///
    /// The size (width, height and depth) of the noise map can be specified during
    /// object construction or at any other time.
    /// 
    /// All of the values outside of the noise map are assumed to have a
    /// common value known as the border value.
    ///
    /// To set the border value, modify the BorderValue property.
    /// </remarks>
    public sealed class NoiseCube
    {
        /// <summary>
        /// Gets or sets the border value for all positions outside the cube
        /// </summary>
        public float BorderValue { get; set; }

        /// <summary>
        /// Gets the width of the Cube
        /// </summary>
        public int Width { get; private set; }

        /// <summary>
        /// Gets the height of the Cube
        /// </summary>
        public int Height { get; private set; }

        /// <summary>
        /// Gets the depth of the Cube
        /// </summary>
        public int Depth { get; private set; }

        /// <summary>
        /// Gets a value indicating whether the Cube is empty
        /// </summary>
        public bool IsEmpty { get { return values == null; } }

        float[] values;

        public NoiseCube()
        {
        }

        public NoiseCube(int width, int height, int depth)
        {
            SetSize(width, height, depth);
        }

        /// <summary>
        /// Copy Constructor
        /// </summary>
        /// <param name="other">The NoiseCube to copy</param>
        public NoiseCube(NoiseCube other)
        {
            if (other == null)
                throw new ArgumentNullException("other");

            SetSize(other.Width, other.Height, other.Depth);
            other.values.CopyTo(values, 0);
            BorderValue = other.BorderValue;
        }

        /// <summary>
        /// Clears and resets the cube
        /// </summary>
        public void ResetCube()
        {
            values = null;
            Width = 0;
            Height = 0;
            Depth = 0;
            BorderValue = 0;
        }

        /// <summary>
        /// Clears the cube to a specified value.
        /// </summary>
        /// <param name="value">
        /// The value that all positions within the noise cube are cleared to.
        /// </param>
        public void Clear(float value)
        {
            if (values == null)
                return;

            for (var i = 0; i < values.Length; i++)
                values[i] = value;
        }

        /// <summary>
        /// Sets the size of the cube
        /// </summary>
        /// <param name="width">The new width of the Cube</param>
        /// <param name="height">The new height of the Cube</param>
        /// <param name="depth">The new depth of the Cube</param>
        /// <remarks>
        /// After changing the size of the Cube the contents of the cube are all zero.
        /// </remarks>
        public void SetSize(int width, int height, int depth)
        {
            if (width < 0 || height < 0 || depth < 0)
                throw new ArgumentException("width, height and depth cannot be less than 0.");

            if (width == 0 || height == 0 || depth == 0)
            {
                ResetCube();
            }
            else
            {
                values = new float[width * height * depth];
                Width = width;
                Height = height;
                Depth = depth;
            }
        }

        /// <summary>
        /// Gets or sets a value at the specified position
        /// </summary>
        /// <param name="x">The x coordinate of the position.</param>
        /// <param name="y">The y coordinate of the position.</param>
        /// <param name="z">The z coordinate of the position.</param>
        /// <returns>The value at that position</returns>
        /// <remarks>
        /// This calls <see cref="SetValue"/> or <see cref="GetValue"/>
        /// </remarks>
        public float this[int x, int y, int z]
        {
            get { return GetValue(x, y, z); }
            set { SetValue(x, y, z, value); }
        }

        int GetIndex(int x, int y, int z)
        {
            return x + Width * y + Width * Height * z;
        }

        /// <summary>
        /// Returns a value from the specified position in the cube.
        /// </summary>
        /// <param name="x">The x coordinate of the position.</param>
        /// <param name="y">The y coordinate of the position.</param>
        /// <param name="z">The z coordinate of the position.</param>
        /// <returns>The value at that position.</returns>
        /// <remarks>
        /// This method returns the border value if the coordinates are
        /// outside of the cube bounds.
        /// </remarks>
        public float GetValue(int x, int y, int z)
        {
            if (values != null)
            {
                if (x >= 0 && x < Width && y >= 0 && y < Height && z >= 0 && z < Depth)
                {
                    return values[GetIndex(x, y, z)];
                }
            }

            return BorderValue;
        }

        /// <summary>
        /// Sets a value at a specified position in the cube.
        /// </summary>
        /// <param name="x">The x coordinate of the position.</param>
        /// <param name="y">The y coordinate of the position.</param>
        /// <param name="z">The z coordinate of the position.</param>
        /// <param name="value">The value to set at the given position.</param>
        /// <remarks>
        /// This method does nothing if the noise cube object is empty or the
        /// position is outside the bounds of the cube.
        /// </remarks>
        public void SetValue(int x, int y, int z, float value)
        {
            if (values != null)
            {
                if (x >= 0 && x < Width && y >= 0 && y < Height && z >= 0 && z < Depth)
                {
                    values[GetIndex(x, y, z)] = value;
                }
            }
        }
    }
}
