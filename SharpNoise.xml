<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpNoise</name>
    </assembly>
    <members>
        <member name="T:SharpNoise.NoiseGenerator">
            <summary>
            Implements basic noise generation methods.
            </summary>
        </member>
        <member name="M:SharpNoise.NoiseGenerator.GradientCoherentNoise3D(System.Double,System.Double,System.Double,System.Int32,SharpNoise.NoiseQuality)">
             <summary>
             Generates a gradient-coherent-noise value from the coordinates of a
             three-dimensional input value.
             </summary>
             <param name="x">The x coordinate of the input value.</param>
             <param name="y">The y coordinate of the input value.</param>
             <param name="z">The z coordinate of the input value.</param>
             <param name="seed">The random number seed.</param>
             <param name="noiseQuality">The quality of the coherent-noise.</param>
             <returns>The generated gradient-coherent-noise value.</returns>
             <remarks>
             The return value ranges from -1.0 to +1.0.
            
             For an explanation of the difference between gradient noise and
             value noise, see the comments for the <see cref="M:SharpNoise.NoiseGenerator.GradientNoise3D(System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Int32)"/> function.
             </remarks>
        </member>
        <member name="M:SharpNoise.NoiseGenerator.GradientNoise3D(System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Generates a gradient-noise value from the coordinates of a
             three-dimensional input value and the integer coordinates of a
             nearby three-dimensional value.
             </summary>
             <param name="fx">The floating-point x coordinate of the input value.</param>
             <param name="fy">The floating-point y coordinate of the input value.</param>
             <param name="fz">The floating-point z coordinate of the input value.</param>
             <param name="ix">The integer x coordinate of a nearby value.</param>
             <param name="iy">The integer y coordinate of a nearby value.</param>
             <param name="iz">The integer z coordinate of a nearby value.</param>
             <param name="seed">The random number seed.</param>
             <returns>The generated gradient-noise value.</returns>
             <remarks>
             <para>
               The difference between <paramref name="fx"/> and <paramref name="ix"/> must be less than or equal to one.
               The difference between <paramref name="fy"/> and <paramref name="iy"/> must be less than or equal to one.
               The difference between <paramref name="fz"/> and <paramref name="iz"/> must be less than or equal to one.
            </para>
            <para>
             A gradient-noise function generates better-quality noise than a
             value-noise function.  Most noise modules use gradient noise for
             this reason, although it takes much longer to calculate.
            
             The return value ranges from -1.0 to +1.0.
            
             This function generates a gradient-noise value by performing the
             following steps:
             - It first calculates a random normalized vector based on the
               nearby integer value passed to this function.
             - It then calculates a new value by adding this vector to the
               nearby integer value passed to this function.
             - It then calculates the dot product of the above-generated value
               and the floating-point input value passed to this function.
            
             A noise function differs from a random-number generator because it
             always returns the same output value if the same input value is passed
             to it.
             </para>
             </remarks>
        </member>
        <member name="M:SharpNoise.NoiseGenerator.IntValueNoise3D(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates an integer-noise value from the coordinates of a
            three-dimensional input value.
            </summary>
            <param name="x">The integer x coordinate of the input value.</param>
            <param name="y">The integer y coordinate of the input value.</param>
            <param name="z">The integer z coordinate of the input value.</param>
            <param name="seed">A random number seed.</param>
            <returns>The generated integer-noise value.</returns>
            <remarks>
            The return value ranges from 0 to 2147483647.
            
            A noise function differs from a random-number generator because it
            always returns the same output value if the same input value is passed
            to it.
            </remarks>
        </member>
        <member name="M:SharpNoise.NoiseGenerator.ValueCoherentNoise3D(System.Double,System.Double,System.Double,System.Int32,SharpNoise.NoiseQuality)">
             <summary>
             Generates a value-coherent-noise value from the coordinates of a
             three-dimensional input value.
             </summary>
             <param name="x">The x coordinate of the input value.</param>
             <param name="y">The y coordinate of the input value.</param>
             <param name="z">The z coordinate of the input value.</param>
             <param name="seed">The random number seed.</param>
             <param name="noiseQuality">The quality of the coherent-noise.</param>
             <returns>The generated value-coherent-noise value.</returns>
             <remarks>
             The return value ranges from -1.0 to +1.0.
            
             For an explanation of the difference between gradient noise and
             value noise, see the comments for the <see cref="M:SharpNoise.NoiseGenerator.GradientNoise3D(System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Int32)"/> function.
             </remarks>
        </member>
        <member name="M:SharpNoise.NoiseGenerator.ValueNoise3D(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Generates a value-noise value from the coordinates of a
             three-dimensional input value.
             </summary>
             <param name="x">The x coordinate of the input value.</param>
             <param name="y">The y coordinate of the input value.</param>
             <param name="z">The z coordinate of the input value.</param>
             <param name="seed">A random number seed.</param>
             <returns>The generated value-noise value.</returns>
             <remarks>
             The return value ranges from -1.0 to +1.0.
            
             A noise function differs from a random-number generator because it
             always returns the same output value if the same input value is passed
             to it.
             </remarks>
        </member>
        <member name="T:SharpNoise.Builders.CylinderNoiseMapBuilder">
             <summary>
             Builds a cylindrical noise map.
             </summary>
             <remarks>
             This class builds a noise map by filling it with coherent-noise values
             generated from the surface of a cylinder.
            
             This class describes these input values using an (angle, height)
             coordinate system.  After generating the coherent-noise value from the
             input value, it then "flattens" these coordinates onto a plane so that
             it can write the values into a two-dimensional noise map.
            
             The cylinder model has a radius of 1.0 unit and has infinite height.
             The cylinder is oriented along the y axis.  Its center is at the
             origin.
            
             The x coordinate in the noise map represents the angle around the
             cylinder's y axis.  The y coordinate in the noise map represents the
             height above the x-z plane.
            
             The application must provide the lower and upper angle bounds of the
             noise map, in degrees, and the lower and upper height bounds of the
             noise map, in units.
             </remarks>
        </member>
        <member name="T:SharpNoise.Builders.NoiseMapBuilder">
            <summary>
            Abstract base class for a noise-map builder
            </summary>
            <remarks>
            A builder class builds a noise map by filling it with coherent-noise
            values generated from the surface of a three-dimensional mathematical
            object.  Each builder class defines a specific three-dimensional
            surface, such as a cylinder, sphere, or plane.
            
            A builder class describes these input values using a coordinate system
            applicable for the mathematical object (e.g., a latitude/longitude
            coordinate system for the spherical noise-map builder.)  It then
            "flattens" these coordinates onto a plane so that it can write the
            coherent-noise values into a two-dimensional noise map.
            
            To build the noise map, perform the following steps:
            - Pass the bounding coordinates to the SetBounds() method.
            - Pass the noise map size, in points, to the <see cref="M:SharpNoise.Builders.NoiseMapBuilder.SetDestSize(System.Int32,System.Int32)"/> method.
            - Pass a NoiseMap object to the <see cref="!:SetDestNoiseMap"/> method.
            - Pass a noise module (derived from <see cref="T:SharpNoise.Modules.Module"/>) to the
              <see cref="!:SetSourceModule"/> method.
            - Call the <see cref="M:SharpNoise.Builders.NoiseMapBuilder.Build"/> method.
            
            Note that SetBounds() is not defined in the abstract base class; it is
            only defined in the derived classes.  This is because each model uses
            a different coordinate system.
            </remarks>
        </member>
        <member name="F:SharpNoise.Builders.NoiseMapBuilder.destWidth">
            <summary>
            Destination noise map size
            </summary>
        </member>
        <member name="F:SharpNoise.Builders.NoiseMapBuilder.destHeight">
            <summary>
            Destination noise map size
            </summary>
        </member>
        <member name="M:SharpNoise.Builders.NoiseMapBuilder.Build">
            <summary>
            Builds the noise map.
            </summary>
            <remarks>
            The width and height values specified by <see cref="M:SharpNoise.Builders.NoiseMapBuilder.SetDestSize(System.Int32,System.Int32)"/> must not
            exceed the maximum possible width and height for the noise map.
            
            If a callback function was set, it will be called after each row is completed.
            
            The original contents of the destination noise map is
            destroyed.
            </remarks>
        </member>
        <member name="M:SharpNoise.Builders.NoiseMapBuilder.SetDestSize(System.Int32,System.Int32)">
            <summary>
            Sets the size of the destination noise map.
            </summary>
            <param name="width">
            The width of the destination noise map, in
            points.
            </param>
            <param name="height">
            The height of the destination noise map, in
            points.
            </param>
            <remarks>
            This method does not change the size of the destination noise map
            until the <see cref="M:SharpNoise.Builders.NoiseMapBuilder.Build"/> method is called.
            </remarks>
        </member>
        <member name="M:SharpNoise.Builders.NoiseMapBuilder.SetCallback(System.Action{SharpNoise.Utilities.Map{System.Single}.LineReader})">
            <summary>
            Sets a callback function that will be called each time
            a new row is filled with noise values.
            </summary>
            <param name="callback">The callback function.</param>
            <remarks>
            Set the callback to null to clear the callback.
            </remarks>
        </member>
        <member name="P:SharpNoise.Builders.NoiseMapBuilder.SourceModule">
            <summary>
            Gets or sets the source module
            </summary>
            <remarks>
            This object fills in a noise map with the coherent-noise values
            from this source module.
            </remarks>
        </member>
        <member name="P:SharpNoise.Builders.NoiseMapBuilder.DestNoiseMap">
            <summary>
            Gets or sets the destination noise map
            </summary>
            <remarks>
            The destination noise map will contain the coherent-noise values
            from this noise map after a successful call to the <see cref="M:SharpNoise.Builders.NoiseMapBuilder.Build"/> method.
            </remarks>
        </member>
        <member name="M:SharpNoise.Builders.CylinderNoiseMapBuilder.SetBounds(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the coordinate boundaries of the noise map.
            </summary>
            <param name="lowerAngleBound">The lower angle boundary of the noise map, in degrees.</param>
            <param name="upperAngleBound">The upper angle boundary of the noise map, in degrees.</param>
            <param name="lowerHeightBound">The lower height boundary of the noise map, in units.</param>
            <param name="upperHeightBound">The upper height boundary of the noise map, in units.</param>
            <remarks>
            One unit is equal to the radius of the cylinder.
            </remarks>
        </member>
        <member name="P:SharpNoise.Builders.CylinderNoiseMapBuilder.LowerAngleBound">
            <summary>
            Gets the lower angle boundary of the cylindrical noise map, in degrees.
            </summary>
        </member>
        <member name="P:SharpNoise.Builders.CylinderNoiseMapBuilder.LowerHeightBound">
            <summary>
            Gets the lower height boundary of the cylindrical noise map, in units.
            </summary>
        </member>
        <member name="P:SharpNoise.Builders.CylinderNoiseMapBuilder.UpperAngleBound">
            <summary>
            Gets the upper angle boundary of the cylindrical noise map, in degrees.
            </summary>
        </member>
        <member name="P:SharpNoise.Builders.CylinderNoiseMapBuilder.UpperHeightBound">
            <summary>
            Gets the upper height boundary of the cylindrical noise map, in units.
            </summary>
        </member>
        <member name="T:SharpNoise.Utilities.GradientColor">
             <summary>
             Defines a color gradient.
             </summary>
             <remarks>
             A color gradient is a list of gradually-changing colors.  A color
             gradient is defined by a list of gradient points.  Each
             gradient point has a position and a color.  In a color gradient, the
             colors between two adjacent gradient points are linearly interpolated.
            
             To add a gradient point to the color gradient, pass its position and
             color to the <see cref="M:SharpNoise.Utilities.GradientColor.AddGradientPoint(System.Double,SharpNoise.Utilities.Color)"/> method.
            
             To retrieve a color from a specific position in the color gradient,
             pass that position to the GetColor() method.
            
             This class is a useful tool for coloring height maps based on
             elevation.
            
             Gradient example
            
             Suppose a gradient object contains the following gradient points:
             - -1.0 maps to black.
             - 0.0 maps to white.
             - 1.0 maps to red.
            
             If an application passes -0.5 to the <see cref="M:SharpNoise.Utilities.GradientColor.GetColor(System.Double)"/> method, this method
             will return a gray color that is halfway between black and white.
            
             If an application passes 0.25 to the <see cref="M:SharpNoise.Utilities.GradientColor.GetColor(System.Double)"/> method, this method
             will return a very light pink color that is one quarter of the way
             between white and red.
             </remarks>
        </member>
        <member name="M:SharpNoise.Utilities.GradientColor.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Utilities.GradientColor.#ctor(System.Collections.Generic.IEnumerable{SharpNoise.Utilities.GradientColor.GradientPoint})">
            <summary>
            Constructor.
            </summary>
            <param name="gradientPoints">A predefined list of gradient points</param>
        </member>
        <member name="M:SharpNoise.Utilities.GradientColor.AddGradientPoint(System.Double,SharpNoise.Utilities.Color)">
            <summary>
            Adds a gradient point to this gradient object.
            </summary>
            <param name="gradientPos">The position of this gradient point.</param>
            <param name="color">The color of this gradient point.</param>
            <remarks>
            No two gradient points have the same position.
            It does not matter which order these gradient points are added.
            </remarks>
        </member>
        <member name="M:SharpNoise.Utilities.GradientColor.ClearGradientPoints">
            <summary>
            Deletes all the gradient points from this gradient object.
            </summary>
        </member>
        <member name="M:SharpNoise.Utilities.GradientColor.GetColor(System.Double)">
            <summary>
            Returns the color at the specified position in the color gradient.
            </summary>
            <param name="gradientPosition">The specified position.</param>
            <returns>The color at that position.</returns>
        </member>
        <member name="P:SharpNoise.Utilities.GradientColor.PointCount">
            <summary>
            Gets the amount of gradient points in the gradient
            </summary>
        </member>
        <member name="T:SharpNoise.Utilities.GradientColor.GradientPoint">
             <summary>
             Defines a point used to build a color gradient.
             </summary>
             <remarks>
             A color gradient is a list of gradually-changing colors.  A color
             gradient is defined by a list of gradient points.  Each
             gradient point has a position and a color.  In a color gradient, the
             colors between two adjacent gradient points are linearly interpolated.
            
             The ColorGradient class defines a color gradient by a list of these
             objects.
             </remarks>
        </member>
        <member name="F:SharpNoise.Utilities.GradientColor.GradientPoint.Position">
            <summary>
            The position of this gradient point.
            </summary>
        </member>
        <member name="F:SharpNoise.Utilities.GradientColor.GradientPoint.Color">
            <summary>
            The color of this gradient point.
            </summary>
        </member>
        <member name="M:SharpNoise.Utilities.GradientColor.GradientPoint.#ctor(System.Double,SharpNoise.Utilities.Color)">
            <summary>
            Constructor.
            </summary>
            <param name="position">Position of the GradientPoint</param>
            <param name="color">Color of the GradientPoint</param>
        </member>
        <member name="T:SharpNoise.Modules.Exponent">
             <summary>
             Noise module that maps the output value from a source module onto an
             exponential curve.
             </summary>
             <remarks>
             Because most noise modules will output values that range from -1.0 to
             +1.0, this noise module first normalizes this output value (the range
             becomes 0.0 to 1.0), maps that value onto an exponential curve, then
             rescales that value back to the original range.
            
             This noise module requires one source module.
             </remarks>
        </member>
        <member name="T:SharpNoise.Modules.Module">
             <summary>
             Abstract base class for noise modules.
             </summary>
             <remarks>
             <para>
             A noise module is an object that calculates and outputs a value
             given a three-dimensional input value.
            
             Each type of noise module uses a specific method to calculate an
             output value.  Some of these methods include:
             <list type="bullet">
             <item>
             <description>
             Calculating a value using a coherent-noise function or some other
             mathematical function.
             </description>
             </item>
             <item>
             <description>
             Mathematically changing the output value from another noise module
             in various ways.
             </description>
             </item>
             <item>
             <description>Combining the output values from two noise modules in various ways.</description>
             </item>
             </list>
            
             An application can use the output values from these noise modules in
             the following ways:
             <list type="bullet">
             <item>
             <description>It can be used as an elevation value for a terrain height map</description>
             </item>
             <item>
             <description>It can be used as a grayscale (or an RGB-channel) value for a procedural texture</description>
             </item>
             <item>
             <description>It can be used as a position value for controlling the movement of a simulated lifeform.</description>
             </item>
             </list>
             
             </para>
             
             <para>
             A noise module defines a near-infinite 3-dimensional texture.  Each
             position in this "texture" has a specific value.
             
             Combining noise modules
            
             Noise modules can be combined with other noise modules to generate
             complex output values.  A noise module that is used as a source of
             output values for another noise module is called a source module.
             Each of these source modules may be connected to other
             source modules, and so on.
            
             There is no limit to the number of noise modules that can be connected
             together in this way.  However, each connected noise module increases
             the time required to calculate an output value.
             </para>
             
             <para>
             Noise-module categories
            
             The noise module classes that are included in libnoise can be roughly
             divided into five categories.
             </para>
            
             <para>
             Generator Modules
             
             A generator module outputs a value generated by a coherent-noise
             function or some other mathematical function.
            
             Examples of generator modules include:
             <list type="bullet">
             <item>
             <description><see cref="!:Const"/>: Outputs a constant value.</description>
             </item>
             <item>
             <description><see cref="T:SharpNoise.Modules.Perlin"/>: Outputs a value generated by a Perlin-noise function.</description>
             </item>
             <item>
             <description><see cref="T:SharpNoise.Modules.Voronoi"/>: Outputs a value generated by a Voronoi-cell function.</description>
             </item>
             </list>
             
             </para>
            
             <para>
             Modifier Modules
            
             A modifer module mathematically modifies the output value from a
             source module.
            
             Examples of modifier modules include:
             <list type="bullet">
             <item>
             <description><see cref="T:SharpNoise.Modules.Curve"/>: Maps the output value from the source module onto an arbitrary function curve.</description>
             </item>
             <item>
             <description><see cref="T:SharpNoise.Modules.Invert"/>: Inverts the output value from the source module.</description>
             </item>
             </list>
             
             </para>
            
             <para>
             Combiner Modules
            
             A combiner module mathematically combines the output values from two
             or more source modules together.
            
             Examples of combiner modules include:
             
             <list type="bullet">
             <item>
             <description><see cref="T:SharpNoise.Modules.Add"/>: Adds the two output values from two source modules.</description>
             </item>
             <item>
             <description><see cref="T:SharpNoise.Modules.Max"/>: Outputs the larger of the two output values from two source modules.</description>
             </item>
             </list>
             
             </para>
            
             <para>
             Selector Modules
            
             A selector module uses the output value from a control module
             to specify how to combine the output values from its source modules.
            
             Examples of selector modules include:
             
             <list type="bullet">
             <item>
             <description>
             <see cref="T:SharpNoise.Modules.Blend"/>: Outputs a value that is linearly interpolated
             between the output values from two source modules; the interpolation
             weight is determined by the output value from the control module.
             </description>
             </item>
             <item>
             <description>
             <see cref="T:SharpNoise.Modules.Select"/>: Outputs the value selected from one of two
             source modules chosen by the output value from a control module.
             </description>
             </item>
             </list>
             
             </para>
            
             <para>
             Transformer Modules
            
             A transformer module applies a transformation to the coordinates of
             the input value before retrieving the output value from the source
             module.  A transformer module does not modify the output value.
            
             Examples of transformer modules include:
             
             <list type="bullet">
             <item>
             <description>
             <see cref="T:SharpNoise.Modules.RotatePoint"/>: Rotates the coordinates of the input value around the
             origin before retrieving the output value from the source module.
             </description>
             </item>
             <item>
             <description>
             <see cref="T:SharpNoise.Modules.ScalePoint"/>: Multiplies each coordinate of the input value by a
             constant value before retrieving the output value from the source
             module.
             </description>
             </item>
             </list>
             
             </para>
            
             <para>
             Connecting source modules to a noise module
            
             An application connects a source module to a noise module by passing
             the source module to the <see cref="M:SharpNoise.Modules.Module.SetSourceModule(System.Int32,SharpNoise.Modules.Module)"/> method.
            
             The application must also pass an index value to
             <see cref="M:SharpNoise.Modules.Module.SetSourceModule(System.Int32,SharpNoise.Modules.Module)"/> as well.  An index value is a numeric identifier for
             that source module.  Index values are consecutively numbered starting
             at zero.
            
             To retrieve a reference to a source module, pass its index value to
             the <see cref="M:SharpNoise.Modules.Module.GetSourceModule(System.Int32)"/> method.
            
             Each noise module requires the attachment of a certain number of
             source modules before it can output a value.  For example, the
             <see cref="T:SharpNoise.Modules.Add"/> module requires two source modules, while the
             <see cref="T:SharpNoise.Modules.Perlin"/> module requires none.  Call the
             <see cref="P:SharpNoise.Modules.Module.SourceModuleCount"/> method to retrieve the number of source modules
             required by that module.
            
             For non-selector modules, it usually does not matter which index value
             an application assigns to a particular source module, but for selector
             modules, the purpose of a source module is defined by its index value.
             For example, consider the <see cref="T:SharpNoise.Modules.Select"/> noise module, which
             requires three source modules.  The control module is the source
             module assigned an index value of 2.  The control module determines
             whether the noise module will output the value from the source module
             assigned an index value of 0 or the output value from the source
             module assigned an index value of 1.
             </para>
            
             <para>
             Generating output values with a noise module
            
             Once an application has connected all required source modules to a
             noise module, the application can now begin to generate output values
             with that noise module.
            
             To generate an output value, pass the ( x, y, z ) coordinates
             of an input value to the <see cref="M:SharpNoise.Modules.Module.GetValue(System.Double,System.Double,System.Double)"/> method.
             </para>
            
             <para>
             Using a noise module to generate terrain height maps or textures
            
             One way to generate a terrain height map or a texture is to first
             allocate a 2-dimensional array of floating-point values.  For each
             array element, pass the array subscripts as x and y coordinates
             to the <see cref="M:SharpNoise.Modules.Module.GetValue(System.Double,System.Double,System.Double)"/> method (leaving the z coordinate set to zero) and
             place the resulting output value into the array element.
             </para>
            
             <para>
             Creating your own noise modules
            
             Create a class that publicly derives from <see cref="T:SharpNoise.Modules.Module"/>.
            
             In the constructor, call the base class' constructor while passing the
             number of required source modules.
            
             Override the <see cref="M:SharpNoise.Modules.Module.GetValue(System.Double,System.Double,System.Double)"/> pure virtual method.  For generator modules,
             calculate and output a value given the coordinates of the input value.
             For other modules, retrieve the output values from each source module
             referenced in the protected source modules array, mathematically
             combine those values, and return the combined value.
            
             When developing a noise module, you must ensure that your noise module
             does not modify any source module or control module connected to it; a
             noise module can only modify the output value from those source
             modules.  You must also ensure that if an application fails to connect
             all required source modules via the <see cref="M:SharpNoise.Modules.Module.SetSourceModule(System.Int32,SharpNoise.Modules.Module)"/> method and then
             attempts to call the <see cref="M:SharpNoise.Modules.Module.GetValue(System.Double,System.Double,System.Double)"/> method, your module will raise an
             assertion.
            
             It shouldn't be too difficult to create your own noise module.  If you
             still have some problems, take a look at the source code for
             <see cref="T:SharpNoise.Modules.Add"/>, which is a very simple noise module.
             </para>
             </remarks>
        </member>
        <member name="M:SharpNoise.Modules.Module.#ctor(System.Int32)">
            <summary>
            Constructor, called from derived classes
            </summary>
            <param name="sourceModuleCount">The number of required source modules.</param>
        </member>
        <member name="M:SharpNoise.Modules.Module.GetSourceModule(System.Int32)">
             <summary>
             Returns a reference to a source module connected to this noise
             module.
             </summary>
             <param name="index">The index value assigned to the source module.</param>
             <returns>A reference to the source module.</returns>
             <remarks>
             The index value ranges from 0 to one less than the number of
             source modules required by this noise module.
             A source module with the specified index value has been added
             to this noise module via a call to <see cref="M:SharpNoise.Modules.Module.SetSourceModule(System.Int32,SharpNoise.Modules.Module)"/>.
            
             Each noise module requires the attachment of a certain number of
             source modules before an application can call the <see cref="M:SharpNoise.Modules.Module.GetValue(System.Double,System.Double,System.Double)"/>
             method.
             </remarks>
        </member>
        <member name="M:SharpNoise.Modules.Module.SetSourceModule(System.Int32,SharpNoise.Modules.Module)">
             <summary>
             Connects a source module to this noise module.
             </summary>
             <param name="index">An index value to assign to this source module.</param>
             <param name="module">The source module to attach.</param>
             <remarks>
             The index value ranges from 0 to one less than the number of
             source modules required by this noise module.
            
             A noise module mathematically combines the output values from the
             source modules to generate the value returned by <see cref="M:SharpNoise.Modules.Module.GetValue(System.Double,System.Double,System.Double)"/>.
            
             The index value to assign a source module is a unique identifier
             for that source module.  If an index value has already been
             assigned to a source module, this noise module replaces the old
             source module with the new source module.
            
             Before an application can call the <see cref="M:SharpNoise.Modules.Module.GetValue(System.Double,System.Double,System.Double)"/>v method, it must
             first connect all required source modules.  To determine the
             number of source modules required by this noise module, call the
             <see cref="!:GetSourceModuleCount"/> method.
            
             This source module must exist throughout the lifetime of this
             noise module unless another source module replaces that source
             module.
            
             A noise module does not modify a source module; it only modifies
             its output values.
             </remarks>
        </member>
        <member name="M:SharpNoise.Modules.Module.Serialize(System.IO.Stream)">
            <summary>
            Serializes the entire module graph to a stream.
            </summary>
            <param name="target">The stream that the serialized data will be written to.</param>
            <remarks>
            This method uses the BinaryFormatter as a default.
            </remarks>
        </member>
        <member name="M:SharpNoise.Modules.Module.Serialize(System.IO.Stream,System.Runtime.Serialization.IFormatter)">
            <summary>
            Serializes the entire module graph to a stream.
            </summary>
            <param name="target">The stream that the serialized data will be written to.</param>
            <param name="formatter">The formatter to use for serialization</param>
        </member>
        <member name="M:SharpNoise.Modules.Module.Deserialize``1(System.IO.Stream,System.Runtime.Serialization.IFormatter)">
            <summary>
            Deserializes a module graph from a stream.
            </summary>
            <param name="source">The source stream from which the serialized data will be read</param>
            <param name="formatter">The formatter to be used for deserialization</param>
            <returns>Returns the deserialized object</returns>
        </member>
        <member name="M:SharpNoise.Modules.Module.GetValue(System.Double,System.Double,System.Double)">
             <summary>
             Generates an output value given the coordinates of the specified
             input value.
             </summary>
             <param name="x">The x coordinate of the input value.</param>
             <param name="y">The y coordinate of the input value.</param>
             <param name="z">The z coordinate of the input value.</param>
             <returns>The output value.</returns>
             <remarks>
             All source modules required by this noise module have been
             passed to the <see cref="M:SharpNoise.Modules.Module.SetSourceModule(System.Int32,SharpNoise.Modules.Module)"/> method.
            
             Before an application can call this method, it must first connect
             all required source modules via the <see cref="M:SharpNoise.Modules.Module.SetSourceModule(System.Int32,SharpNoise.Modules.Module)"/> method.  If
             these source modules are not connected to this noise module, this
             method raises a debug assertion.
            
             To determine the number of source modules required by this noise
             module, call the <see cref="!:GetSourceModuleCount"/> method.
             </remarks>
        </member>
        <member name="P:SharpNoise.Modules.Module.SourceModuleCount">
            <summary>
            Returns the number of source modules required by this noise
            module.
            </summary>
        </member>
        <member name="F:SharpNoise.Modules.Exponent.DefaultExponent">
            <summary>
            Default exponent
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Exponent.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Exponent.GetValue(System.Double,System.Double,System.Double)">
            <summary>
            See the documentation on the base class.
            <seealso cref="T:SharpNoise.Modules.Module"/>
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <returns>Returns the computed value</returns>
        </member>
        <member name="P:SharpNoise.Modules.Exponent.Source0">
            <summary>
            Gets or sets the first source module
            </summary>
        </member>
        <member name="P:SharpNoise.Modules.Exponent.Exp">
            <summary>
            Gets or sets the exponent value to apply to the output value from the
            source module.
            </summary>
            <remarks>
            Because most noise modules will output values that range from -1.0
            to +1.0, this noise module first normalizes this output value (the
            range becomes 0.0 to 1.0), maps that value onto an exponential
            curve, then rescales that value back to the original range.
            </remarks>
        </member>
        <member name="T:SharpNoise.Modules.Perlin">
             <summary>
             Noise module that outputs 3-dimensional Perlin noise.
             </summary>
             <remarks>
             <para>
             Perlin noise is the sum of several coherent-noise functions of
             ever-increasing frequencies and ever-decreasing amplitudes.
            
             An important property of Perlin noise is that a small change in the
             input value will produce a small change in the output value, while a
             large change in the input value will produce a random change in the
             output value.
            
             This noise module outputs Perlin-noise values that usually range from
             -1.0 to +1.0, but there are no guarantees that all output values will
             exist within that range.
            
             For a better description of Perlin noise, see the links in the
             References and Acknowledgments section.
            
             This noise module does not require any source modules.
             </para>
             
             <para>
             Octaves
            
             The number of octaves control the amount of detail of the
             Perlin noise.  Adding more octaves increases the detail of the Perlin
             noise, but with the drawback of increasing the calculation time.
            
             An octave is one of the coherent-noise functions in a series of
             coherent-noise functions that are added together to form Perlin
             noise.
            
             An application may specify the frequency of the first octave by
             changing the <see cref="P:SharpNoise.Modules.Perlin.Frequency"/> property.
            
             An application may specify the number of octaves that generate Perlin
             noise by changing the <see cref="P:SharpNoise.Modules.Perlin.OctaveCount"/> property.
            
             These coherent-noise functions are called octaves because each octave
             has, by default, double the frequency of the previous octave.  Musical
             tones have this property as well; a musical C tone that is one octave
             higher than the previous C tone has double its frequency.
             </para>
             
             <para>
             Frequency
            
             An application may specify the frequency of the first octave by
             changing the <see cref="P:SharpNoise.Modules.Perlin.Frequency"/> property.
             </para>
             
             <para>
             Persistence
            
             The persistence value controls the roughness of the Perlin
             noise.  Larger values produce rougher noise.
            
             The persistence value determines how quickly the amplitudes diminish
             for successive octaves.  The amplitude of the first octave is 1.0.
             The amplitude of each subsequent octave is equal to the product of the
             previous octave's amplitude and the persistence value.  So a
             persistence value of 0.5 sets the amplitude of the first octave to
             1.0; the second, 0.5; the third, 0.25; etc.
            
             An application may specify the persistence value by changing the
             <see cref="P:SharpNoise.Modules.Perlin.Persistence"/> property.
             </para>
             
             <para>
             Lacunarity
            
             The lacunarity specifies the frequency multipler between successive
             octaves.
            
             The effect of modifying the lacunarity is subtle; you may need to play
             with the lacunarity value to determine the effects.  For best results,
             set the lacunarity to a number between 1.5 and 3.5.
             </para>
             
             <para>
             References &amp; acknowledgments
            
             http://www.noisemachine.com/talk1/
             The Noise Machine - From the master, Ken Perlin himself.  
             This page contains a presentation that describes Perlin noise
             and some of its variants.
             He won an Oscar for creating the Perlin noise algorithm!
            
             http://freespace.virgin.net/hugo.elias/models/m_perlin.htm
             Perlin Noise - Hugo Elias's webpage contains a very good
             description of Perlin noise and describes its many applications.  This
             page gave me the inspiration to create libnoise in the first place.
             Now that I know how to generate Perlin noise, I will never again use
             cheesy subdivision algorithms to create terrain (unless I absolutely
             need the speed.)
            
             http://www.robo-murito.net/code/perlin-noise-math-faq.html
             The Perlin noise math FAQ - A good page that describes Perlin noise in
             plain English with only a minor amount of math.  During development of
             libnoise, I noticed that my coherent-noise function generated terrain
             with some "regularity" to the terrain features.  This page describes a
             better coherent-noise function called gradient noise.  This
             version of Perlin uses gradient coherent noise to
             generate Perlin noise.
             </para>
             </remarks>
        </member>
        <member name="F:SharpNoise.Modules.Perlin.DefaultFrequency">
            <summary>
            Default frequency for the Perlin noise module.
            </summary>
        </member>
        <member name="F:SharpNoise.Modules.Perlin.DefaultLacunarity">
            <summary>
            Default lacunarity for the Perlin noise module.
            </summary>
        </member>
        <member name="F:SharpNoise.Modules.Perlin.DefaultOctaveCount">
            <summary>
            Default number of octaves for the Perlin noise module.
            </summary>
        </member>
        <member name="F:SharpNoise.Modules.Perlin.DefaultPersistence">
            <summary>
            Default persistence value for the Perlin noise module.
            </summary>
        </member>
        <member name="F:SharpNoise.Modules.Perlin.DefaultQuality">
            <summary>
            Default noise quality for the Perlin noise module.
            </summary>
        </member>
        <member name="F:SharpNoise.Modules.Perlin.DefaultSeed">
            <summary>
            Default noise seed for the Perlin noise module.
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Perlin.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Perlin.GetValue(System.Double,System.Double,System.Double)">
            <summary>
            See the documentation on the base class.
            <seealso cref="T:SharpNoise.Modules.Module"/>
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <returns>Returns the computed value</returns>
        </member>
        <member name="P:SharpNoise.Modules.Perlin.Frequency">
            <summary>
            Gets or sets the frequency of the first octave.
            </summary>
        </member>
        <member name="P:SharpNoise.Modules.Perlin.Lacunarity">
             <summary>
             Gets or sets the lacunarity of the Perlin noise.
             </summary>
             <remarks>
             The lacunarity is the frequency multiplier between successive
             octaves.
            
             For best results, set the lacunarity to a number between 1.5 and
             3.5.
             </remarks>
        </member>
        <member name="P:SharpNoise.Modules.Perlin.OctaveCount">
             <summary>
             Gets or sets the number of octaves that generate the Perlin noise.
             </summary>
             <remarks>
             The number of octaves controls the amount of detail in the Perlin
             noise.
            
             The larger the number of octaves, the more time required to
             calculate the Perlin-noise value.
             </remarks>
        </member>
        <member name="P:SharpNoise.Modules.Perlin.Persistence">
             <summary>
             Gets or sets the persistence value of the Perlin noise.
             </summary>
             <remarks>
             The persistence value controls the roughness of the Perlin noise.
            
             For best results, set the persistence to a number between 0.0 and
             1.0.
             </remarks>
        </member>
        <member name="P:SharpNoise.Modules.Perlin.Quality">
            <summary>
            Gets or sets the quality of the Perlin noise.
            </summary>
        </member>
        <member name="P:SharpNoise.Modules.Perlin.Seed">
            <summary>
            Gets or sets the seed value used by the Perlin-noise function.
            </summary>
        </member>
        <member name="T:SharpNoise.Modules.Displace">
             <summary>
             Noise module that uses three source modules to displace each
             coordinate of the input value before returning the output value from
             a source module.
             </summary>
             <remarks>
             Unlike most other noise modules, the index value assigned to a source
             module determines its role in the displacement operation:
             
             <list type="bullet">
             <item>
             <description>
             Source module 0 (left in the diagram) outputs a value.
             </description>
             </item>
             <item>
             <description>
             Source module 1 specifies the offset to
             apply to the x coordinate of the input value.
             </description>
             </item>
             <item>
             <description>
             Source module 2 specifies the
             offset to apply to the y coordinate of the input value.
             </description>
             </item>
             <item>
             <description>
             Source module 3 specifies the offset
             to apply to the z coordinate of the input value.
             </description>
             </item>
             </list>
             
             The <see cref="M:SharpNoise.Modules.Displace.GetValue(System.Double,System.Double,System.Double)"/> method modifies the ( x, y, z ) coordinates of
             the input value using the output values from the three displacement
             modules before retrieving the output value from the source module.
            
             The Turbulence noise module is a special case of the
             displacement module; internally, there are three Perlin-noise modules
             that perform the displacement operation.
            
             This noise module requires four source modules.
             </remarks>
        </member>
        <member name="M:SharpNoise.Modules.Displace.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Displace.SetDisplacementModules(SharpNoise.Modules.Module,SharpNoise.Modules.Module,SharpNoise.Modules.Module)">
             <summary>
             Sets all displacement modules in one go.
             </summary>
             <param name="xDisplaceModule">
             Displacement module that displaces the x
             coordinate of the input value.
             </param>
             <param name="yDisplaceModule">
             Displacement module that displaces the y
             coordinate of the input value.
             </param>
             <param name="zDisplaceModule">
             Displacement module that displaces the z
             coordinate of the input value.
             </param>
             <remarks>
             The <see cref="M:SharpNoise.Modules.Displace.GetValue(System.Double,System.Double,System.Double)"/> method displaces the input value by adding the output
             value from each of the displacement modules to the corresponding
             coordinates of the input value before returning the output value
             from the source module.
            
             This method assigns an index value of 1 to the x displacement
             module, an index value of 2 to the y displacement module, and an
             index value of 3 to the z displacement module.
             </remarks>
        </member>
        <member name="M:SharpNoise.Modules.Displace.GetValue(System.Double,System.Double,System.Double)">
            <summary>
            See the documentation on the base class.
            <seealso cref="T:SharpNoise.Modules.Module"/>
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <returns>Returns the computed value</returns>
        </member>
        <member name="P:SharpNoise.Modules.Displace.Source0">
            <summary>
            Gets or sets the first source module
            </summary>
        </member>
        <member name="P:SharpNoise.Modules.Displace.XDisplace">
            <summary>
            Gets or sets the x displacement module.
            </summary>
            <remarks>
            The <see cref="M:SharpNoise.Modules.Displace.GetValue(System.Double,System.Double,System.Double)"/> method displaces the input value by adding the output
            value from this displacement module to the x coordinate of the
            input value before returning the output value from the source
            module.
            </remarks>
        </member>
        <member name="P:SharpNoise.Modules.Displace.YDisplace">
            <summary>
            Gets or sets the y displacement module.
            </summary>
            <remarks>
            The <see cref="M:SharpNoise.Modules.Displace.GetValue(System.Double,System.Double,System.Double)"/> method displaces the input value by adding the output
            value from this displacement module to the x coordinate of the
            input value before returning the output value from the source
            module.
            </remarks>
        </member>
        <member name="P:SharpNoise.Modules.Displace.ZDisplace">
            <summary>
            Gets or sets the z displacement module.
            </summary>
            <remarks>
            The <see cref="M:SharpNoise.Modules.Displace.GetValue(System.Double,System.Double,System.Double)"/> method displaces the input value by adding the output
            value from this displacement module to the x coordinate of the
            input value before returning the output value from the source
            module.
            </remarks>
        </member>
        <member name="T:SharpNoise.Models.Cylinder">
             <summary>
             Model that defines the surface of a cylinder.
             </summary>
             <remarks>
             This model returns an output value from a noise module given the
             coordinates of an input value located on the surface of a cylinder.
            
             To generate an output value, pass the (angle, height) coordinates of
             an input value to the <see cref="M:SharpNoise.Models.Cylinder.GetValue(System.Double,System.Double)"/> method.
            
             This model is useful for creating:
             - seamless textures that can be mapped onto a cylinder
            
             This cylinder has a radius of 1.0 unit and has infinite height.  It is
             oriented along the y axis.  Its center is located at the origin.
             </remarks>
        </member>
        <member name="T:SharpNoise.Models.Model">
            <summary>
            Base class for models
            </summary>
        </member>
        <member name="P:SharpNoise.Models.Model.Source">
            <summary>
            The module used to generate noise.
            </summary>
            <remarks>
            Must be set before GetValue can be called in derived classes.
            </remarks>
        </member>
        <member name="M:SharpNoise.Models.Cylinder.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Models.Cylinder.#ctor(SharpNoise.Modules.Module)">
            <summary>
            Constructor.
            </summary>
            <param name="sourceModule">The noise module that is used to generate the output
            values.</param>
        </member>
        <member name="M:SharpNoise.Models.Cylinder.GetValue(System.Double,System.Double)">
            <summary>
            Returns the output value from the noise module given the
            (angle, height) coordinates of the specified input value located
            on the surface of the cylinder.
            </summary>
            <param name="angle">The angle around the cylinder's center, in degrees.</param>
            <param name="height">The height along the y axis.</param>
            <returns>The output value from the noise module.</returns>
            <remarks>
            This cylinder has a radius of 1.0 unit and has infinite height.
            It is oriented along the y axis.  Its center is located at the
            origin.
            </remarks>
        </member>
        <member name="T:SharpNoise.Modules.TranslatePoint">
             <summary>
             Noise module that moves the coordinates of the input value before
             returning the output value from a source module.
             </summary>
             <remarks>
             The <see cref="M:SharpNoise.Modules.TranslatePoint.GetValue(System.Double,System.Double,System.Double)"/> method moves the ( x, y, z ) coordinates of
             the input value by a translation amount before returning the output
             value from the source module.  To set the translation amount, call
             the <see cref="M:SharpNoise.Modules.TranslatePoint.SetTranslation(System.Double)"/> method.  To set the translation amount to
             apply to the individual x, y, or z coordinates, modify the
             XTranslation, YTranslation or ZTranslation properties,
             respectively.
            
             This noise module requires one source module.
             </remarks>
        </member>
        <member name="F:SharpNoise.Modules.TranslatePoint.DefaultTranslation">
            <summary>
            Default translation amount
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.TranslatePoint.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.TranslatePoint.SetTranslation(System.Double)">
            <summary>
            Sets the translation amount to apply to the input value.
            </summary>
            <param name="translation">The translation amount to apply.</param>
            <remarks>
            The <see cref="M:SharpNoise.Modules.TranslatePoint.GetValue(System.Double,System.Double,System.Double)"/> method moves the ( x, y, z ) coordinates
            of the input value by a translation amount before returning the
            output value from the source module
            </remarks>
        </member>
        <member name="M:SharpNoise.Modules.TranslatePoint.GetValue(System.Double,System.Double,System.Double)">
            <summary>
            See the documentation on the base class.
            <seealso cref="T:SharpNoise.Modules.Module"/>
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <returns>Returns the computed value</returns>
        </member>
        <member name="P:SharpNoise.Modules.TranslatePoint.Source0">
            <summary>
            Gets or sets the first source module
            </summary>
        </member>
        <member name="P:SharpNoise.Modules.TranslatePoint.XTranslation">
            <summary>
            Gets or sets the translation amount to apply to theb x coordinate of
            the input value.
            </summary>
        </member>
        <member name="P:SharpNoise.Modules.TranslatePoint.YTranslation">
            <summary>
            Gets or sets the translation amount to apply to theb y coordinate of
            the input value.
            </summary>
        </member>
        <member name="P:SharpNoise.Modules.TranslatePoint.ZTranslation">
            <summary>
            Gets or sets the translation amount to apply to the z coordinate of
            the input value.
            </summary>
        </member>
        <member name="T:SharpNoise.Utilities.ImageRenderer">
             <summary>
             Renders an image from a noise map.
             </summary>
             <remarks>
             This class renders an image given the contents of a noise-map object.
            
             An application can configure the output of the image in three ways:
             - Specify the color gradient.
             - Specify the light source parameters.
             - Specify the background image.
            
             This class uses a color gradient to calculate the color for each pixel
             in the destination image according to the value from the corresponding
             position in the noise map.
            
             A color gradient is a list of gradually-changing colors.  A color
             gradient is defined by a list of gradient points.  Each
             gradient point has a position and a color.  In a color gradient, the
             colors between two adjacent gradient points are linearly interpolated.
            
             For example, suppose this class contains the following color gradient:
            
             - -1.0 maps to dark blue.
             - -0.2 maps to light blue.
             - -0.1 maps to tan.
             - 0.0 maps to green.
             - 1.0 maps to white.
            
             The value 0.5 maps to a greenish-white color because 0.5 is halfway
             between 0.0 (mapped to green) and 1.0 (mapped to white).
            
             The value -0.6 maps to a medium blue color because -0.6 is halfway
             between -1.0 (mapped to dark blue) and -0.2 (mapped to light blue).
            
             The color gradient requires a minimum of two gradient points.
            
             This class contains two pre-made gradients: a grayscale gradient and a
             color gradient suitable for terrain.  To use these pre-made gradients,
             call the <see cref="M:SharpNoise.Utilities.ImageRenderer.BuildGrayscaleGradient"/> or <see cref="M:SharpNoise.Utilities.ImageRenderer.BuildTerrainGradient"/> methods,
             respectively.
            
             The color value passed to <see cref="M:SharpNoise.Utilities.ImageRenderer.AddGradientPoint(System.Double,SharpNoise.Utilities.Color)"/> has an alpha
             channel.  This alpha channel specifies how a pixel in the background
             image (if specified) is blended with the calculated color.  If the
             alpha value is high, this class weighs the blend towards the
             calculated color, and if the alpha value is low, this class weighs the
             blend towards the color from the corresponding pixel in the background
             image.
            
             This class contains a parallel light source that lights the image.  It
             interprets the noise map as a bump map.
            
             To enable or disable lighting, pass a Boolean value to the
             <see cref="P:SharpNoise.Utilities.ImageRenderer.EnableLight"/> property.
            
             To set the position of the light source in the "sky", call the
             <see cref="P:SharpNoise.Utilities.ImageRenderer.LightAzimuth"/> and <see cref="!:LightElev"/> properties.
            
             To set the color of the light source, call the <see cref="P:SharpNoise.Utilities.ImageRenderer.LightColor"/> property.
            
             To set the intensity of the light source, call the <see cref="P:SharpNoise.Utilities.ImageRenderer.LightIntensity"/>
             property.  A good intensity value is 2.0, although that value tends to
             "wash out" very light colors from the image.
             
             To set the contrast amount between areas in light and areas in shadow,
             call the <see cref="P:SharpNoise.Utilities.ImageRenderer.LightContrast"/> property.  Determining the correct contrast
             amount requires some trial and error, but if your application
             interprets the noise map as a height map that has its elevation values
             measured in meters and has a horizontal resolution of h meters, a
             good contrast amount to use is ( 1.0 / h ).
             
             To specify a background image, pass an Image object to the
             <see cref="P:SharpNoise.Utilities.ImageRenderer.BackgroundImage"/> property.
            
             This class determines the color of a pixel in the destination image by
             blending the calculated color with the color of the corresponding
             pixel from the background image.
            
             The blend amount is determined by the alpha of the calculated color.
             If the alpha value is high, this class weighs the blend towards the
             calculated color, and if the alpha value is low, this class weighs the
             blend towards the color from the corresponding pixel in the background
             image.
            
             To render the image, perform the following steps:
             - Pass a NoiseMap object to the <see cref="P:SharpNoise.Utilities.ImageRenderer.SourceNoiseMap"/> property.
             - Pass an Image object to the <see cref="P:SharpNoise.Utilities.ImageRenderer.DestinationImage"/> property.
             - Pass an Image object to the <see cref="P:SharpNoise.Utilities.ImageRenderer.BackgroundImage"/> property (optional)
             - Call the <see cref="M:SharpNoise.Utilities.ImageRenderer.Render"/> method.
             </remarks>
        </member>
        <member name="M:SharpNoise.Utilities.ImageRenderer.AddGradientPoint(System.Double,SharpNoise.Utilities.Color)">
             <summary>
             Adds a gradient point to this gradient object.
             </summary>
             <param name="gradientPos">The position of this gradient point.</param>
             <param name="gradientColor">The color of this gradient point.</param>
             <remarks>
             No two gradient points can have the same position.
             
             This object uses a color gradient to calculate the color for each
             pixel in the destination image according to the value from the
             corresponding position in the noise map.
            
             The gradient requires a minimum of two gradient points.
            
             The specified color value passed to this method has an alpha
             channel.  This alpha channel specifies how a pixel in the
             background image (if specified) is blended with the calculated
             color.  If the alpha value is high, this object weighs the blend
             towards the calculated color, and if the alpha value is low, this
             object weighs the blend towards the color from the corresponding
             pixel in the background image.
             </remarks>
        </member>
        <member name="M:SharpNoise.Utilities.ImageRenderer.BuildGrayscaleGradient">
            <summary>
            Builds a grayscale gradient.
            </summary>
            <remarks>
            The original gradient is cleared and a grayscale gradient is
            created.
            
            This color gradient contains the following gradient points:
            - -1.0 maps to black
            - 1.0 maps to white
            </remarks>
        </member>
        <member name="M:SharpNoise.Utilities.ImageRenderer.BuildTerrainGradient">
            <summary>
            Builds a color gradient suitable for terrain.
            </summary>
            <remarks>
            The original gradient is cleared and a terrain gradient is
            created.
            
            This gradient color at position 0.0 is the "sea level".  Above
            that value, the gradient contains greens, browns, and whites.
            Below that value, the gradient contains various shades of blue.
            </remarks>
        </member>
        <member name="M:SharpNoise.Utilities.ImageRenderer.ClearGradient">
            <summary>
            Clears the color gradient.
            </summary>
            <remarks>
            Before calling the <see cref="M:SharpNoise.Utilities.ImageRenderer.Render"/> method, the application must specify a
            new color gradient with at least two gradient points.
            </remarks>
        </member>
        <member name="M:SharpNoise.Utilities.ImageRenderer.Render">
            <summary>
            Renders the destination image using the contents of the source
            noise map and an optional background image.
            </summary>
            <remarks>
            The background image and the destination image can safely refer to
            the same image, although in this case, the destination image is
            irretrievably blended into the background image.
            </remarks>
        </member>
        <member name="M:SharpNoise.Utilities.ImageRenderer.CalcDestinationColor(SharpNoise.Utilities.Color,SharpNoise.Utilities.Color,System.Double)">
            <summary>
            Calculates the destination color.
            </summary>
            <param name="sourceColor">The source color generated from the color
            gradient.</param>
            <param name="backgroundColor">The color from the background image at the
            corresponding position.</param>
            <param name="lightValue">The intensity of the light at that position.</param>
            <returns>The destination color.</returns>
        </member>
        <member name="M:SharpNoise.Utilities.ImageRenderer.CalcLightIntensity(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the intensity of the light given some elevation values.
            </summary>
            <param name="center">Elevation of the center point.</param>
            <param name="left">Elevation of the point directly left of the center
            point.</param>
            <param name="right">Elevation of the point directly right of the center
            point.</param>
            <param name="down">Elevation of the point directly below the center
            point.</param>
            <param name="up">Elevation of the point directly above the center point.</param>
            <returns>The calculated light intensity.</returns>
            <remarks>
            These values come directly from the noise map.
            </remarks>
        </member>
        <member name="M:SharpNoise.Utilities.ImageRenderer.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:SharpNoise.Utilities.ImageRenderer.EnableLight">
            <summary>
            Enables or disables the light source.
            </summary>
            <remarks>
            If the light source is enabled, this object will interpret the
            noise map as a bump map.
            </remarks>
        </member>
        <member name="P:SharpNoise.Utilities.ImageRenderer.EnableWrap">
             <summary>
             Enables or disables noise-map wrapping.
             </summary>
             <remarks>
             This object requires five points (the initial point and its four
             neighbors) to calculate light shading.  If wrapping is enabled,
             and the initial point is on the edge of the noise map, the
             appropriate neighbors that lie outside of the noise map will
             "wrap" to the opposite side(s) of the noise map.  Otherwise, the
             appropriate neighbors are cropped to the edge of the noise map.
            
             Enabling wrapping is useful when creating spherical renderings and
             tileable textures.
             </remarks>
        </member>
        <member name="P:SharpNoise.Utilities.ImageRenderer.LightAzimuth">
             <summary>
             Gets or sets the azimuth of the light source, in degrees.
             </summary>
             <remarks>
             The azimuth is the location of the light source around the
             horizon:
             - 0.0 degrees is east.
             - 90.0 degrees is north.
             - 180.0 degrees is west.
             - 270.0 degrees is south.
            
             Make sure the light source is enabled via a call to the
             <see cref="P:SharpNoise.Utilities.ImageRenderer.EnableLight"/> property before calling the <see cref="M:SharpNoise.Utilities.ImageRenderer.Render"/> method.
             </remarks>
        </member>
        <member name="P:SharpNoise.Utilities.ImageRenderer.LightBrightness">
            <summary>
            Gets or sets the brightness of the light source.
            </summary>
            <remarks>
            Make sure the light source is enabled via a call to the
            <see cref="P:SharpNoise.Utilities.ImageRenderer.EnableLight"/> property before calling the <see cref="M:SharpNoise.Utilities.ImageRenderer.Render"/> method.
            </remarks>
        </member>
        <member name="P:SharpNoise.Utilities.ImageRenderer.LightColor">
            <summary>
            Gets or sets the color of the light source.
            </summary>
            <remarks>
            Make sure the light source is enabled via a call to the
            <see cref="P:SharpNoise.Utilities.ImageRenderer.EnableLight"/> property before calling the <see cref="M:SharpNoise.Utilities.ImageRenderer.Render"/> method.
            </remarks>
        </member>
        <member name="P:SharpNoise.Utilities.ImageRenderer.LightElevation">
            <summary>
            Gets or sets the elevation of the light source, in degrees.
            </summary>
            <remarks>
            The elevation is the angle above the horizon:
            - 0 degrees is on the horizon.
            - 90 degrees is straight up.
            
            Make sure the light source is enabled via a call to the
            <see cref="P:SharpNoise.Utilities.ImageRenderer.EnableLight"/> property before calling the <see cref="M:SharpNoise.Utilities.ImageRenderer.Render"/> method.
            </remarks>
        </member>
        <member name="P:SharpNoise.Utilities.ImageRenderer.LightIntensity">
            <summary>
            Gets or sets the intensity of the light source.
            </summary>
            <remarks>
            A good value for intensity is 2.0.
            
            Make sure the light source is enabled via a call to the
            <see cref="P:SharpNoise.Utilities.ImageRenderer.EnableLight"/> property before calling the <see cref="M:SharpNoise.Utilities.ImageRenderer.Render"/> method.
            </remarks>
        </member>
        <member name="P:SharpNoise.Utilities.ImageRenderer.LightContrast">
             <summary>
             Gets or sets the contrast of the light source.
             </summary>
             <remarks>
             The contrast specifies how sharp the boundary is between the
             light-facing areas and the shadowed areas.
            
             The contrast determines the difference between areas in light and
             areas in shadow.  Determining the correct contrast amount requires
             some trial and error, but if your application interprets the noise
             map as a height map that has a spatial resolution of h meters
             and an elevation resolution of 1 meter, a good contrast amount to
             use is ( 1.0 / h ).
             
             Make sure the light source is enabled via a call to the
             <see cref="P:SharpNoise.Utilities.ImageRenderer.EnableLight"/> property before calling the <see cref="M:SharpNoise.Utilities.ImageRenderer.Render"/> method.
             </remarks>
        </member>
        <member name="P:SharpNoise.Utilities.ImageRenderer.BackgroundImage">
             <summary>
             Gets ot sets the background image.
             </summary>
             <remarks>
             If a background image has been specified, the <see cref="M:SharpNoise.Utilities.ImageRenderer.Render"/> method
             blends the pixels from the background image onto the corresponding
             pixels in the destination image.  The blending weights are
             determined by the alpha channel in the pixels in the destination
             image.
            
             The destination image must exist throughout the lifetime of this
             object unless another image replaces that image.
             </remarks>
        </member>
        <member name="P:SharpNoise.Utilities.ImageRenderer.DestinationImage">
             <summary>
             Gets or sets the destination image.
             </summary>
             <remarks>
             The destination image will contain the rendered image after a
             successful call to the <see cref="M:SharpNoise.Utilities.ImageRenderer.Render"/> method.
            
             The destination image must exist throughout the lifetime of this
             object unless another image replaces that image.
             </remarks>
        </member>
        <member name="P:SharpNoise.Utilities.ImageRenderer.SourceNoiseMap">
            <summary>
            Gets or sets the source noise map.
            </summary>
        </member>
        <member name="T:SharpNoise.Utilities.Image">
             <summary>
             Implements an image, a 2-dimensional array of color values.
             </summary>
             <remarks>
             An image can be used to store a color texture.
            
             These color values are of type <see cref="T:SharpNoise.Utilities.Color"/>.
             
             The size (width and height) of the image can be specified during
             object construction or at any other time.
            
             The <see cref="!:GetValue"/> method returns the border value if the specified
             position lies outside of the image.
             </remarks>
        </member>
        <member name="T:SharpNoise.Utilities.Map`1">
            <summary>
            Base class for 2D arrays like NoiseMap and Image
            </summary>
            <typeparam name="T">The type of the data within the map</typeparam>
        </member>
        <member name="M:SharpNoise.Utilities.Map`1.#ctor">
            <summary>
            Constructor for an empty Map.
            </summary>
        </member>
        <member name="M:SharpNoise.Utilities.Map`1.#ctor(System.Int32,System.Int32)">
             <summary>
             Constructor.
             </summary>
             <param name="width">The width of the new noise map.</param>
             <param name="height">The height of the new noise map.</param>
             <remarks>
             Creates a map with uninitialized values.
            
             It is considered an error if the specified dimensions are not
             positive.
             </remarks>
        </member>
        <member name="M:SharpNoise.Utilities.Map`1.#ctor(SharpNoise.Utilities.Map{`0})">
            <summary>
            Copy Constructor
            </summary>
            <param name="other">The Map to copy</param>
        </member>
        <member name="M:SharpNoise.Utilities.Map`1.GetIndex(System.Int32,System.Int32)">
             <summary>
             Calculates the index to a slab at the specified position.
             </summary>
             <param name="x">The x coordinate of the position.</param>
             <param name="y">The y coordinate of the position.</param>
             <returns>The index to a slab at the position ( x, y )</returns>
             <remarks>
             The coordinates must exist within the bounds of the map.
            
             This method does not perform bounds checking so be careful when
             calling it.
             
             This method will throw an InvalidOperationException if the Map is empty.
             </remarks>
        </member>
        <member name="M:SharpNoise.Utilities.Map`1.GetIndex(System.Int32)">
             <summary>
             Calculates the index to a slab at the specified row.
             </summary>
             <param name="row">The row, or y coordinate.</param>
             <returns>The index to a slab at the position ( 0, row )</returns>
             <remarks>
             The coordinates must exist within the bounds of the  map.
            
             This method does not perform bounds checking so be careful when
             calling it.
             
             This method will throw an InvalidOperationException if the Map is empty.
             </remarks>
        </member>
        <member name="M:SharpNoise.Utilities.Map`1.ResetMap">
            <summary>
            Clears and resets the map
            </summary>
        </member>
        <member name="M:SharpNoise.Utilities.Map`1.GetLineReader(System.Int32)">
            <summary>
            Create a LineReader for the specified row in the Map.
            </summary>
            <param name="row">The index of the row that will be read.</param>
            <returns>Returns a new LineReader.</returns>
        </member>
        <member name="M:SharpNoise.Utilities.Map`1.GetLineReaders">
            <summary>
            Creates LineReaders for all rows in the Map.
            </summary>
            <returns>Returns LineReaders for all rows in the Map from 0 to Height.</returns>
        </member>
        <member name="M:SharpNoise.Utilities.Map`1.Clear(`0)">
            <summary>
            Clears the map to a specified value.
            </summary>
            <param name="value">
            The value that all positions within the noise map are
            cleared to.
            </param>
        </member>
        <member name="M:SharpNoise.Utilities.Map`1.SetSize(System.Int32,System.Int32)">
            <summary>
            Sets the size of the Map
            </summary>
            <param name="height">The new height of the Map</param>
            <param name="width">The new width of the Map</param>
            <remarks>
            After changing the size of the Map,
            the contents of the map are undefined.
            </remarks>
        </member>
        <member name="M:SharpNoise.Utilities.Map`1.GetValue(System.Int32,System.Int32)">
            <summary>
            Returns a value from the specified position in the map.
            </summary>
            <param name="x">The x coordinate of the position.</param>
            <param name="y">The y coordinate of the position.</param>
            <returns>The value at that position.</returns>
            <remarks>
            This method returns the border value if the coordinates exist
            outside of the map.
            </remarks>
        </member>
        <member name="M:SharpNoise.Utilities.Map`1.SetValue(System.Int32,System.Int32,`0)">
            <summary>
            Sets a value at a specified position in the map.
            </summary>
            <param name="x">The x coordinate of the position.</param>
            <param name="y">The y coordinate of the position.</param>
            <param name="value">The value to set at the given position.</param>
            <remarks>
            This method does nothing if the noise map object is empty or the
            position is outside the bounds of the map.
            </remarks>
        </member>
        <member name="P:SharpNoise.Utilities.Map`1.BorderValue">
            <summary>
            Gets or sets the border value for all positions outside the map
            </summary>
        </member>
        <member name="P:SharpNoise.Utilities.Map`1.Height">
            <summary>
            Gets the height of the Map
            </summary>
        </member>
        <member name="P:SharpNoise.Utilities.Map`1.Width">
            <summary>
            Gets the width of the Map
            </summary>
        </member>
        <member name="P:SharpNoise.Utilities.Map`1.UsedMemory">
            <summary>
            Gets the amount of memory allocated by the Map (in bytes)
            </summary>
        </member>
        <member name="P:SharpNoise.Utilities.Map`1.IsEmpty">
            <summary>
            Gets a value indicating whether the Map is empty
            </summary>
        </member>
        <member name="T:SharpNoise.Utilities.Map`1.LineReader">
            <summary>
            Provides read-only access to a single line in the map.
            </summary>
        </member>
        <member name="M:SharpNoise.Utilities.Map`1.LineReader.#ctor(SharpNoise.Utilities.Map{`0},System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="map">The map to read from.</param>
            <param name="lower">The lower (start) index of the row.</param>
            <param name="upper">The upper (end) index of the row.</param>
        </member>
        <member name="M:SharpNoise.Utilities.Image.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Utilities.Image.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Utilities.Image.#ctor(SharpNoise.Utilities.Image)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Utilities.Image.ToGdiBitmap">
            <summary>
            Converts the Image to a System.Drawing.Bitmap
            </summary>
            <returns>Returns the created Bitmap</returns>
            <remarks>
            This isn't exactly optimised for speed. Will be slow for large Images.
            </remarks>
        </member>
        <member name="T:SharpNoise.Utilities.Color">
             <summary>
             Defines a color
             </summary>
             <remarks>
             A color object contains four 8-bit channels: red, green, blue, and an
             alpha (transparency) channel.  Channel values range from 0 to 255.
            
             The alpha channel defines the transparency of the color.  If the alpha
             channel has a value of 0, the color is completely transparent.  If the
             alpha channel has a value of 255, the color is completely opaque.
             </remarks>
        </member>
        <member name="F:SharpNoise.Utilities.Color.Red">
            <summary>
            Gets the red color channel
            </summary>
        </member>
        <member name="F:SharpNoise.Utilities.Color.Green">
            <summary>
            Gets the green color channel
            </summary>
        </member>
        <member name="F:SharpNoise.Utilities.Color.Blue">
            <summary>
            Gets the blue color channel
            </summary>
        </member>
        <member name="F:SharpNoise.Utilities.Color.Alpha">
            <summary>
            Gets the alpha channel
            </summary>
        </member>
        <member name="M:SharpNoise.Utilities.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Constructor.
            </summary>
            <param name="red">The red color channel</param>
            <param name="green">The green color channel</param>
            <param name="blue">The blue color channel</param>
            <param name="alpha">The alpha channel</param>
        </member>
        <member name="M:SharpNoise.Utilities.Color.#ctor(SharpNoise.Utilities.Color)">
            <summary>
            Constructor.
            </summary>
            <param name="other">The color to be cloned</param>
        </member>
        <member name="M:SharpNoise.Utilities.Color.ToGdiColor">
            <summary>
            Converts this Color to a System.Drawing.Color
            </summary>
            <returns>Returns the created color</returns>
        </member>
        <member name="T:SharpNoise.Modules.Terrace">
             <summary>
             Noise module that maps the output value from a source module onto a
             terrace-forming curve.
             </summary>
             <remarks>
             This noise module maps the output value from the source module onto a
             terrace-forming curve.  The start of this curve has a slope of zero;
             its slope then smoothly increases.  This curve also contains
             control points which resets the slope to zero at that point,
             producing a "terracing" effect.
             
             To add a control point to this noise module, call the
             <see cref="M:SharpNoise.Modules.Terrace.AddControlPoint(System.Double)"/> method.
            
             An application must add a minimum of two control points to the curve.
             If this is not done, the <see cref="M:SharpNoise.Modules.Terrace.GetValue(System.Double,System.Double,System.Double)"/> method fails.  The control points
             can have any value, although no two control points can have the same
             value.  There is no limit to the number of control points that can be
             added to the curve.
            
             This noise module clamps the output value from the source module if
             that value is less than the value of the lowest control point or
             greater than the value of the highest control point.
            
             This noise module is often used to generate terrain features such as
             your stereotypical desert canyon.
            
             This noise module requires one source module.
             </remarks>
        </member>
        <member name="M:SharpNoise.Modules.Terrace.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Terrace.AddControlPoint(System.Double)">
             <summary>
             Adds a control point to the terrace-forming curve.
             </summary>
             <param name="value">The value of the control point to add.</param>
             <remarks>
             No two control points can have the same value.
             
             Two or more control points define the terrace-forming curve.  The
             start of this curve has a slope of zero; its slope then smoothly
             increases.  At the control points, its slope resets to zero.
            
             It does not matter which order these points are added.
             </remarks>
        </member>
        <member name="M:SharpNoise.Modules.Terrace.ClearControlPoints">
            <summary>
            Deletes all the control points on the terrace-forming curve.
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Terrace.MakeControlPoints(System.Int32)">
            <summary>
            Creates a number of equally-spaced control points that range from
            -1 to +1.
            </summary>
            <param name="count">The number of control points to generate.</param>
            <remarks>
            The number of control points must be greater than or equal to
            2.
            
            The previous control points on the terrace-forming curve are
            deleted.
            
            Two or more control points define the terrace-forming curve.  The
            start of this curve has a slope of zero; its slope then smoothly
            increases.  At the control points, its slope resets to zero.
            </remarks>
        </member>
        <member name="M:SharpNoise.Modules.Terrace.GetValue(System.Double,System.Double,System.Double)">
            <summary>
            See the documentation on the base class.
            <seealso cref="T:SharpNoise.Modules.Module"/>
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <returns>Returns the computed value</returns>
        </member>
        <member name="P:SharpNoise.Modules.Terrace.ControlPointCount">
            <summary>
            Gets the number of control points on the terrace-forming curve.
            </summary>
        </member>
        <member name="P:SharpNoise.Modules.Terrace.InvertTerraces">
            <summary>
            Enables or disables the inversion of the terrace-forming curve
            between the control points.
            </summary>
        </member>
        <member name="P:SharpNoise.Modules.Terrace.Source0">
            <summary>
            Gets or sets the first source module
            </summary>
        </member>
        <member name="T:SharpNoise.Modules.Cylinder">
             <summary>
             Noise module that outputs concentric cylinders.
             </summary>
             <remarks>
             This noise module outputs concentric cylinders centered on the origin.
             These cylinders are oriented along the y axis similar to the
             concentric rings of a tree.  Each cylinder extends infinitely along
             the y axis.
            
             The first cylinder has a radius of 1.0.  Each subsequent cylinder has
             a radius that is 1.0 unit larger than the previous cylinder.
            
             The output value from this noise module is determined by the distance
             between the input value and the the nearest cylinder surface.  The
             input values that are located on a cylinder surface are given the
             output value 1.0 and the input values that are equidistant from two
             cylinder surfaces are given the output value -1.0.
            
             An application can change the frequency of the concentric cylinders.
             Increasing the frequency reduces the distances between cylinders.  To
             specify the frequency, modify the <see cref="P:SharpNoise.Modules.Cylinder.Frequency"/> method.
            
             This noise module, modified with some low-frequency, low-power
             turbulence, is useful for generating wood-like textures.
            
             This noise module does not require any source modules.
             </remarks>
        </member>
        <member name="F:SharpNoise.Modules.Cylinder.DefaultFrequency">
            <summary>
            Default frequency value
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Cylinder.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Cylinder.GetValue(System.Double,System.Double,System.Double)">
            <summary>
            See the documentation on the base class.
            <seealso cref="T:SharpNoise.Modules.Module"/>
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <returns>Returns the computed value</returns>
        </member>
        <member name="P:SharpNoise.Modules.Cylinder.Frequency">
            <summary>
            Gets or sets the frequency of the concentric cylinders.
            </summary>
            <remarks>
            Increasing the frequency increases the density of the concentric
            cylinders, reducing the distances between them.
            </remarks>
        </member>
        <member name="T:SharpNoise.Models.Line">
             <summary>
             Model that defines the displacement of a line segment.
             </summary>
             <remarks>
             This model returns an output value from a noise module given the
             one-dimensional coordinate of an input value located on a line
             segment, which can be used as displacements.
            
             This class is useful for creating:
              - roads and rivers
              - disaffected college students
            
             To generate an output value, pass an input value between 0.0 and 1.0
             to the <see cref="M:SharpNoise.Models.Line.GetValue(System.Double)"/> method.  0.0 represents the start position of the
             line segment and 1.0 represents the end position of the line segment.
             </remarks>
        </member>
        <member name="M:SharpNoise.Models.Line.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Models.Line.#ctor(SharpNoise.Modules.Module)">
            <summary>
            Constructor.
            </summary>
            <param name="sourceModule">The noise module that is used to generate the output
            values.</param>
        </member>
        <member name="M:SharpNoise.Models.Line.SetStartPoint(System.Double,System.Double,System.Double)">
            <summary>
            Sets the position ( x, y, z ) of the start of the line
            segment to choose values along.
            </summary>
            <param name="x">x coordinate of the start position.</param>
            <param name="y">y coordinate of the start position.</param>
            <param name="z">z coordinate of the start position.</param>
        </member>
        <member name="M:SharpNoise.Models.Line.SetEndPoint(System.Double,System.Double,System.Double)">
            <summary>
            Sets the position ( x, y, z ) of the end of the line
            segment to choose values along.
            </summary>
            <param name="x">x coordinate of the end position.</param>
            <param name="y">y coordinate of the end position.</param>
            <param name="z">z coordinate of the end position.</param>
        </member>
        <member name="P:SharpNoise.Models.Line.Attenuate">
            <summary>
            Gets or sets a flag indicating whether the output value is to be
            attenuated (moved toward 0.0) as the ends of the line segment are
            approached by the input value.
            </summary>
        </member>
        <member name="T:SharpNoise.Modules.NoModuleException">
            <summary>
            The exception that indicates that a module is missing
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.NoModuleException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.NoModuleException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:SharpNoise.Modules.NoModuleException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="inner">The exception that is the cause of this exception</param>
        </member>
        <member name="T:SharpNoise.Modules.ModuleSerializationException">
            <summary>
            The exception that indicates that an error has occured during serialization or deserialization of a module
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.ModuleSerializationException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.ModuleSerializationException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:SharpNoise.Modules.ModuleSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="inner">The exception that is the cause of this exception</param>
        </member>
        <member name="T:SharpNoise.Modules.Max">
            <summary>
            Noise module that outputs the larger of the two output values from two
            source modules.
            </summary>
            <remarks>
            This noise module requires two source modules.
            </remarks>
        </member>
        <member name="M:SharpNoise.Modules.Max.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Max.GetValue(System.Double,System.Double,System.Double)">
            <summary>
            See the documentation on the base class.
            <seealso cref="T:SharpNoise.Modules.Module"/>
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <returns>Returns the computed value</returns>
        </member>
        <member name="P:SharpNoise.Modules.Max.Source0">
            <summary>
            Gets or sets the first source module
            </summary>
        </member>
        <member name="P:SharpNoise.Modules.Max.Source1">
            <summary>
            Gets or sets the second source module
            </summary>
        </member>
        <member name="T:SharpNoise.Modules.Curve">
             <summary>
             Noise module that maps the output value from a source module onto an
             arbitrary function curve.
             </summary>
             <remarks>
             This noise module maps the output value from the source module onto an
             application-defined curve.  This curve is defined by a number of
             control points; each control point has an input value
             that maps to an output value.
            
             To add the control points to this curve, call the <see cref="M:SharpNoise.Modules.Curve.AddControlPoint(System.Double,System.Double)"/>
             method.
            
             Since this curve is a cubic spline, an application must add a minimum
             of four control points to the curve.  If this is not done, the
             <see cref="M:SharpNoise.Modules.Curve.GetValue(System.Double,System.Double,System.Double)"/> method fails.  Each control point can have any input and
             output value, although no two control points can have the same input
             value.  There is no limit to the number of control points that can be
             added to the curve.  
            
             This noise module requires one source module.
             </remarks>
        </member>
        <member name="M:SharpNoise.Modules.Curve.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Curve.AddControlPoint(System.Double,System.Double)">
            <summary>
            Adds a control point to the curve.
            </summary>
            <param name="inputValue">The input value stored in the control point.</param>
            <param name="outputValue">The output value stored in the control point.</param>
            <remarks>
            No two control points have the same input value.
            
            It does not matter which order these points are added.
            </remarks>
        </member>
        <member name="M:SharpNoise.Modules.Curve.ClearControlPoints">
            <summary>
            Deletes all the control points on the curve.
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Curve.GetControlPoints">
            <summary>
            Gets all control points on the curve
            </summary>
            <returns>An IEnumerable containing all control points</returns>
        </member>
        <member name="M:SharpNoise.Modules.Curve.GetControlPointCount">
            <summary>
            Gets the number of control points on the curve
            </summary>
            <returns>Returns the number of control points on the curve</returns>
        </member>
        <member name="M:SharpNoise.Modules.Curve.GetValue(System.Double,System.Double,System.Double)">
            <summary>
            See the documentation on the base class.
            <seealso cref="T:SharpNoise.Modules.Module"/>
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <returns>Returns the computed value</returns>
        </member>
        <member name="P:SharpNoise.Modules.Curve.Source0">
            <summary>
            Gets or sets the first source module
            </summary>
        </member>
        <member name="T:SharpNoise.Modules.Curve.ControlPoint">
            <summary>
            This structure defines a control point.
            Control points are used for defining splines.
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Curve.ControlPoint.#ctor(System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="input">The input value</param>
            <param name="output">The output value</param>
        </member>
        <member name="T:SharpNoise.Modules.Constant">
             <summary>
             Noise module that outputs a constant value.
             </summary>
             <remarks>
             To specify the constant value, modify the <see cref="P:SharpNoise.Modules.Constant.Value"/> property.
            
             This noise module is not useful by itself, but it is often used as a
             source module for other noise modules.
            
             This noise module does not require any source modules.
             </remarks>
        </member>
        <member name="F:SharpNoise.Modules.Constant.DefaultConstantValue">
            <summary>
            The default constant value of the Constant module
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Constant.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Constant.GetValue(System.Double,System.Double,System.Double)">
            <summary>
            See the documentation on the base class.
            <seealso cref="T:SharpNoise.Modules.Module"/>
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <returns>Returns the computed value</returns>
        </member>
        <member name="P:SharpNoise.Modules.Constant.Value">
            <summary>
            The value that will be produced by the module
            </summary>
        </member>
        <member name="T:SharpNoise.Builders.PlaneNoiseMapBuilder">
             <summary>
             Builds a planar noise map.
             </summary>
             <remarks>
             This class builds a noise map by filling it with coherent-noise values
             generated from the surface of a plane.
            
             This class describes these input values using (x, z) coordinates.
             Their y coordinates are always 0.0.
            
             The application must provide the lower and upper x coordinate bounds
             of the noise map, in units, and the lower and upper z coordinate
             bounds of the noise map, in units.
            
             To make a tileable noise map with no seams at the edges, modify the
             <see cref="P:SharpNoise.Builders.PlaneNoiseMapBuilder.EnableSeamless"/> property.
             </remarks>
        </member>
        <member name="M:SharpNoise.Builders.PlaneNoiseMapBuilder.SetBounds(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the boundaries of the planar noise map.
            </summary>
            <param name="lowerXBound">The lower x boundary of the noise map, in
            units.</param>
            <param name="upperXBound">The upper x boundary of the noise map, in
            units.</param>
            <param name="lowerZBound">The lower z boundary of the noise map, in
            units.</param>
            <param name="upperZBound">The upper z boundary of the noise map, in
            units.</param>
        </member>
        <member name="P:SharpNoise.Builders.PlaneNoiseMapBuilder.EnableSeamless">
            <summary>
            Enables or disables seamless tiling.
            </summary>
            <remarks>
            Enabling seamless tiling builds a noise map with no seams at the
            edges.  This allows the noise map to be tileable.
            </remarks>
        </member>
        <member name="P:SharpNoise.Builders.PlaneNoiseMapBuilder.LowerXBound">
            <summary>
            Gets the lower x boundary of the planar noise map.
            </summary>
        </member>
        <member name="P:SharpNoise.Builders.PlaneNoiseMapBuilder.UpperXBound">
            <summary>
            Gets the upper x boundary of the planar noise map.
            </summary>
        </member>
        <member name="P:SharpNoise.Builders.PlaneNoiseMapBuilder.LowerZBound">
            <summary>
            Gets the lower z boundary of the planar noise map.
            </summary>
        </member>
        <member name="P:SharpNoise.Builders.PlaneNoiseMapBuilder.UpperZBound">
            <summary>
            Gets the upper z boundary of the planar noise map.
            </summary>
        </member>
        <member name="T:SharpNoise.Modules.Voronoi">
             <summary>
             Noise module that outputs Voronoi cells.
             </summary>
             <remarks>
             <para>
             In mathematics, a Voronoi cell is a region containing all the
             points that are closer to a specific seed point than to any
             other seed point.  These cells mesh with one another, producing
             polygon-like formations.
             </para>
             
             <para>
             By default, this noise module randomly places a seed point within
             each unit cube.  By modifying the frequency of the seed points,
             an application can change the distance between seed points.  The
             higher the frequency, the closer together this noise module places
             the seed points, which reduces the size of the cells.  To specify the
             frequency of the cells, modify the Frequency property.
            
             This noise module assigns each Voronoi cell with a random constant
             value from a coherent-noise function.  The displacement value
             controls the range of random values to assign to each cell.  The
             range of random values is +/- the displacement value.  
             Modify the Displacement property to specify the displacement value.
             </para>
             
             <para>
             To modify the random positions of the seed points, 
             modify the Seed property.
             </para>
             
             <para>
             This noise module can optionally add the distance from the nearest
             seed to the output value. To enable this feature, modify the
             EnableDistance property. This causes the points in the Voronoi cells
             to increase in value the further away that point is from the nearest
             seed point.
             </para>
             
             <para>
             Voronoi cells are often used to generate cracked-mud terrain
             formations or crystal-like textures
             </para>
             
             This noise module requires no source modules.
             </remarks>
        </member>
        <member name="F:SharpNoise.Modules.Voronoi.DefaultDisplacement">
            <summary>
            Default displacement to apply to each cell
            </summary>
        </member>
        <member name="F:SharpNoise.Modules.Voronoi.DefaultFrequency">
            <summary>
            Default frequency of the seed points
            </summary>
        </member>
        <member name="F:SharpNoise.Modules.Voronoi.DefaultSeed">
            <summary>
            Default seed of the noise function
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Voronoi.GetValue(System.Double,System.Double,System.Double)">
            <summary>
            See the documentation on the base class.
            <seealso cref="T:SharpNoise.Modules.Module"/>
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <returns>Returns the computed value</returns>
        </member>
        <member name="M:SharpNoise.Modules.Voronoi.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:SharpNoise.Modules.Voronoi.EnableDistance">
            <summary>
            Enables or disables applying the distance from the nearest seed
            point to the output value.
            </summary>
            <remarks>
            Applying the distance from the nearest seed point to the output
            value causes the points in the Voronoi cells to increase in value
            the further away that point is from the nearest seed point.
            Setting this value to true (and setting the displacement to a
            near-zero value) causes this noise module to generate cracked mud
            formations.
            </remarks>
        </member>
        <member name="P:SharpNoise.Modules.Voronoi.Displacement">
            <summary>
            Gets or sets the displacement value of the Voronoi cells.
            </summary>
            <remarks>
            This noise module assigns each Voronoi cell with a random constant
            value from a coherent-noise function.  The displacement
            value controls the range of random values to assign to each
            cell.  The range of random values is +/- the displacement value.
            </remarks>
        </member>
        <member name="P:SharpNoise.Modules.Voronoi.Frequency">
            <summary>
            Gets or sets the frequency of the seed points.
            </summary>
            <remarks>
            The frequency determines the size of the Voronoi cells and the
            distance between these cells.
            </remarks>
        </member>
        <member name="P:SharpNoise.Modules.Voronoi.Seed">
            <summary>
            Gets or sets the seed value used by the Voronoi cells
            </summary>
            <remarks>
            The positions of the seed values are calculated by a
            coherent-noise function.  By modifying the seed value, the output
            of that function changes.
            </remarks>
        </member>
        <member name="T:SharpNoise.Modules.Turbulence">
             <summary>
             Noise module that randomly displaces the input value before
             returning the output value from a source module.
             </summary>
             <remarks>
             <para>
             Turbulence is the pseudo-random displacement of the input value.
             The GetValue() method randomly displaces the ( x, y, z )
             coordinates of the input value before retrieving the output value from
             the source module.  To control the turbulence, an application can
             modify its frequency, its power, and its roughness.
             </para>
             
             <para>
             The frequency of the turbulence determines how rapidly the
             displacement amount changes.  To specify the frequency, modify the
             <see cref="P:SharpNoise.Modules.Turbulence.Frequency"/> property.
             </para>
             
             <para>
             The power of the turbulence determines the scaling factor that is
             applied to the displacement amount.  To specify the power, modify the
             <see cref="P:SharpNoise.Modules.Turbulence.Power"/> property.
             </para>
             
             <para>
             The roughness of the turbulence determines the roughness of the
             changes to the displacement amount.  Low values smoothly change the
             displacement amount.  High values roughly change the displacement
             amount, which produces more "kinky" changes.  To specify the
             roughness, modify the <see cref="P:SharpNoise.Modules.Turbulence.Roughness"/> property.
             </para>
             
             <para>
             Use of this noise module may require some trial and error.  Assuming
             that you are using a generator module as the source module, you
             should first:
             <list type="bullet">
             <item>
             <description>Set the frequency to the same frequency as the source module.</description>
             </item>
             <item>
             <description>Set the power to the reciprocal of the frequency.</description>
             </item>
             </list>
            
             From these initial frequency and power values, modify these values
             until this noise module produce the desired changes in your terrain or
             texture.  For example:
             <list type="bullet">
             <item>
             <description>
             Low frequency (1/8 initial frequency) and low power (1/8 initial
             power) produces very minor, almost unnoticeable changes.
             </description>
             </item>
             <item>
             <description>
             Low frequency (1/8 initial frequency) and high power (8 times
             initial power) produces "ropey" lava-like terrain or marble-like
             textures.
             </description>
             </item>
             <item>
             <description>
             High frequency (8 times initial frequency) and low power (1/8
             initial power) produces a noisy version of the initial terrain or
             texture.
             </description>
             </item>
             <item>
             <description>
             High frequency (8 times initial frequency) and high power (8 times
             initial power) produces nearly pure noise, which isn't entirely
             useful.
             </description>
             </item>
             </list>
             </para>
             
             <para>
             Displacing the input values result in more realistic terrain and
             textures.  If you are generating elevations for terrain height maps,
             you can use this noise module to produce more realistic mountain
             ranges or terrain features that look like flowing lava rock.  If you
             are generating values for textures, you can use this noise module to
             produce realistic marble-like or "oily" textures.
            
             Internally, there are three Perlin noise modules
             that displace the input value; one for the x, one for the y,
             and one for the z coordinate.
             </para>
             
             This noise module requires one source module.
             </remarks>
        </member>
        <member name="F:SharpNoise.Modules.Turbulence.DefaultFrequency">
            <summary>
            Default frequency
            </summary>
        </member>
        <member name="F:SharpNoise.Modules.Turbulence.DefaultPower">
            <summary>
            Default power
            </summary>
        </member>
        <member name="F:SharpNoise.Modules.Turbulence.DefaultRoughness">
            <summary>
            Default roughness
            </summary>
        </member>
        <member name="F:SharpNoise.Modules.Turbulence.DefaultSeed">
            <summary>
            Default noise seed
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Turbulence.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Turbulence.GetValue(System.Double,System.Double,System.Double)">
            <summary>
            See the documentation on the base class.
            <seealso cref="T:SharpNoise.Modules.Module"/>
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <returns>Returns the computed value</returns>
        </member>
        <member name="P:SharpNoise.Modules.Turbulence.Source0">
            <summary>
            Gets or sets the first source module
            </summary>
        </member>
        <member name="P:SharpNoise.Modules.Turbulence.Power">
            <summary>
            Gets or sets the power of the turbulence.
            </summary>
            <remarks>
            The power of the turbulence determines the scaling factor that is
            applied to the displacement amount.
            </remarks>
        </member>
        <member name="P:SharpNoise.Modules.Turbulence.Frequency">
            <summary>
            Gets or sets the frequency of the turbulence.
            </summary>
            <remarks>
            The frequency of the turbulence determines how rapidly the
            displacement amount changes.
            </remarks>
        </member>
        <member name="P:SharpNoise.Modules.Turbulence.Roughness">
            <summary>
            Gets or sets the roughness of the turbulence.
            </summary>
            <remarks>
            The roughness of the turbulence determines the roughness of the
            changes to the displacement amount.  Low values smoothly change
            the displacement amount.  High values roughly change the
            displacement amount, which produces more "kinky" changes.
            </remarks>
        </member>
        <member name="P:SharpNoise.Modules.Turbulence.Seed">
            <summary>
            Returns the seed value of the internal Perlin-noise modules that
            are used to displace the input values.
            </summary>
            <remarks>
            Internally, there are three Perlin noise modules
            that displace the input value; one for the x, one for the y,
            and one for the z coordinate.  
            </remarks>
        </member>
        <member name="T:SharpNoise.Modules.RotatePoint">
             <summary>
             Noise module that rotates the input value around the origin before
             returning the output value from a source module.
             </summary>
             <remarks>
             The <see cref="M:SharpNoise.Modules.RotatePoint.GetValue(System.Double,System.Double,System.Double)"/> method rotates the coordinates of the input value
             around the origin before returning the output value from the source
             module.  To set the rotation angles, call the <see cref="M:SharpNoise.Modules.RotatePoint.SetAngles(System.Double,System.Double,System.Double)"/> method.  To
             set the rotation angle around the individual x, y, or z axes,
             modify the <see cref="P:SharpNoise.Modules.RotatePoint.XAngle"/>, <see cref="P:SharpNoise.Modules.RotatePoint.YAngle"/> or <see cref="P:SharpNoise.Modules.RotatePoint.ZAngle"/> properties,
             respectively.
            
             The coordinate system of the input value is assumed to be
             "left-handed" (x increases to the right, y increases upward,
             and z increases inward.)
            
             This noise module requires one source module.
             </remarks>
        </member>
        <member name="F:SharpNoise.Modules.RotatePoint.DefaultRotation">
            <summary>
            Default rotation angle for all axes
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.RotatePoint.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.RotatePoint.SetAngles(System.Double,System.Double,System.Double)">
            <summary>
            Sets the rotation angles around all three axes to apply to the
            input value.
            </summary>
            <param name="xAngle">The rotation angle around the x axis, in degrees.</param>
            <param name="yAngle">The rotation angle around the x axis, in degrees.</param>
            <param name="zAngle">The rotation angle around the x axis, in degrees.</param>
        </member>
        <member name="M:SharpNoise.Modules.RotatePoint.GetValue(System.Double,System.Double,System.Double)">
            <summary>
            See the documentation on the base class.
            <seealso cref="T:SharpNoise.Modules.Module"/>
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <returns>Returns the computed value</returns>
        </member>
        <member name="P:SharpNoise.Modules.RotatePoint.Source0">
            <summary>
            Gets or sets the first source module
            </summary>
        </member>
        <member name="P:SharpNoise.Modules.RotatePoint.XAngle">
            <summary>
            Gets or sets the rotation angle around the x axis to apply to the
            input value.
            </summary>
        </member>
        <member name="P:SharpNoise.Modules.RotatePoint.YAngle">
            <summary>
            Gets or sets the rotation angle around the y axis to apply to the
            input value.
            </summary>
        </member>
        <member name="P:SharpNoise.Modules.RotatePoint.ZAngle">
            <summary>
            Gets or sets the rotation angle around the z axis to apply to the
            input value.
            </summary>
        </member>
        <member name="T:SharpNoise.Modules.Min">
            <summary>
            Noise module that outputs the smaller of the two output values from two
            source modules.
            </summary>
            <remarks>
            This noise module requires two source modules.
            </remarks>
        </member>
        <member name="M:SharpNoise.Modules.Min.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Min.GetValue(System.Double,System.Double,System.Double)">
            <summary>
            See the documentation on the base class.
            <seealso cref="T:SharpNoise.Modules.Module"/>
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <returns>Returns the computed value</returns>
        </member>
        <member name="P:SharpNoise.Modules.Min.Source0">
            <summary>
            Gets or sets the first source module
            </summary>
        </member>
        <member name="P:SharpNoise.Modules.Min.Source1">
            <summary>
            Gets or sets the second source module
            </summary>
        </member>
        <member name="T:SharpNoise.Modules.Add">
            <summary>
            Noise module that outputs the sum of the two output values from two
            source modules.
            </summary>
            <remarks>
            This noise module requires two source modules.
            </remarks>
        </member>
        <member name="M:SharpNoise.Modules.Add.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Add.GetValue(System.Double,System.Double,System.Double)">
            <summary>
            See the documentation on the base class.
            <seealso cref="T:SharpNoise.Modules.Module"/>
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <returns>Returns the computed value</returns>
        </member>
        <member name="P:SharpNoise.Modules.Add.Source0">
            <summary>
            Gets or sets the first source module
            </summary>
        </member>
        <member name="P:SharpNoise.Modules.Add.Source1">
            <summary>
            Gets or sets the second source module
            </summary>
        </member>
        <member name="T:SharpNoise.Modules.Abs">
            <summary>
            Noise module that outputs the absolute value of the output value from
            a source module.
            </summary>
            <remarks>
            This noise module requires one source module.
            </remarks>
        </member>
        <member name="M:SharpNoise.Modules.Abs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Abs.GetValue(System.Double,System.Double,System.Double)">
            <summary>
            See the documentation on the base class.
            <seealso cref="T:SharpNoise.Modules.Module"/>
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <returns>Returns the computed value</returns>
        </member>
        <member name="P:SharpNoise.Modules.Abs.Source0">
            <summary>
            Gets or sets the first source module
            </summary>
        </member>
        <member name="T:SharpNoise.Modules.Invert">
            <summary>
            Noise module that inverts the output value from a source module.
            </summary>
            <remarks>
            This noise module requires one source module.
            </remarks>
        </member>
        <member name="M:SharpNoise.Modules.Invert.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Invert.GetValue(System.Double,System.Double,System.Double)">
            <summary>
            See the documentation on the base class.
            <seealso cref="T:SharpNoise.Modules.Module"/>
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <returns>Returns the computed value</returns>
        </member>
        <member name="P:SharpNoise.Modules.Invert.Source0">
            <summary>
            Gets or sets the first source module
            </summary>
        </member>
        <member name="T:SharpNoise.Modules.ScalePoint">
             <summary>
             Noise module that scales the coordinates of the input value before
             returning the output value from a source module.
             </summary>
             <remarks>
             The <see cref="M:SharpNoise.Modules.ScalePoint.GetValue(System.Double,System.Double,System.Double)"/> method multiplies the ( x, y, z ) coordinates
             of the input value with a scaling factor before returning the output
             value from the source module.  To set the scaling factor, call the
             <see cref="M:SharpNoise.Modules.ScalePoint.SetScale(System.Double)"/> method.  To set the scaling factor to apply to the
             individual x, y, or z coordinates, modify the <see cref="P:SharpNoise.Modules.ScalePoint.XScale"/>,
             <see cref="P:SharpNoise.Modules.ScalePoint.YScale"/> or <see cref="P:SharpNoise.Modules.ScalePoint.ZScale"/> properties, respectively.
            
             This noise module requires one source module.
             </remarks>
        </member>
        <member name="F:SharpNoise.Modules.ScalePoint.DefaultScale">
            <summary>
            Default scaling factor applied to all coordinates
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.ScalePoint.SetScale(System.Double)">
            <summary>
            Sets the scaling factor to apply to the input value.
            </summary>
            <param name="scale">The scaling factor to apply.</param>
        </member>
        <member name="M:SharpNoise.Modules.ScalePoint.SetScale(System.Double,System.Double,System.Double)">
            <summary>
            Sets the scaling factors to apply to the input value.
            </summary>
            <param name="xScale">The scaling factor to apply to the x coordinate.</param>
            <param name="yScale">The scaling factor to apply to the y coordinate.</param>
            <param name="zScale">The scaling factor to apply to the z coordinate.</param>
        </member>
        <member name="M:SharpNoise.Modules.ScalePoint.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.ScalePoint.GetValue(System.Double,System.Double,System.Double)">
            <summary>
            See the documentation on the base class.
            <seealso cref="T:SharpNoise.Modules.Module"/>
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <returns>Returns the computed value</returns>
        </member>
        <member name="P:SharpNoise.Modules.ScalePoint.Source0">
            <summary>
            Gets or sets the first source module
            </summary>
        </member>
        <member name="P:SharpNoise.Modules.ScalePoint.XScale">
            <summary>
            Gets or sets the scaling factor applied to the x coordinate of the
            input value.
            </summary>
        </member>
        <member name="P:SharpNoise.Modules.ScalePoint.YScale">
            <summary>
            Gets or sets the scaling factor applied to the y coordinate of the
            input value.
            </summary>
        </member>
        <member name="P:SharpNoise.Modules.ScalePoint.ZScale">
            <summary>
            Gets or sets the scaling factor applied to the z coordinate of the
            input value.
            </summary>
        </member>
        <member name="T:SharpNoise.Modules.ScaleBias">
             <summary>
             Noise module that applies a scaling factor and a bias to the output
             value from a source module.
             </summary>
             <remarks>
             The <see cref="M:SharpNoise.Modules.ScaleBias.GetValue(System.Double,System.Double,System.Double)"/> method retrieves the output value from the source
             module, multiplies it with a scaling factor, adds a bias to it, then
             outputs the value.
            
             This noise module requires one source module.
             </remarks>
        </member>
        <member name="F:SharpNoise.Modules.ScaleBias.DefaultBias">
            <summary>
            Default bias
            </summary>
        </member>
        <member name="F:SharpNoise.Modules.ScaleBias.DefaultScale">
            <summary>
            Default scale
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.ScaleBias.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.ScaleBias.GetValue(System.Double,System.Double,System.Double)">
            <summary>
            See the documentation on the base class.
            <seealso cref="T:SharpNoise.Modules.Module"/>
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <returns>Returns the computed value</returns>
        </member>
        <member name="P:SharpNoise.Modules.ScaleBias.Source0">
            <summary>
            Gets or sets the first source module
            </summary>
        </member>
        <member name="P:SharpNoise.Modules.ScaleBias.Bias">
            <summary>
            Gets or sets the bias to apply to the scaled output value from the
            source module.
            </summary>
            <remarks>
            The <see cref="M:SharpNoise.Modules.ScaleBias.GetValue(System.Double,System.Double,System.Double)"/> method retrieves the output value from the source
            module, multiplies it with the scaling factor, adds the bias to
            it, then outputs the value.
            </remarks>
        </member>
        <member name="P:SharpNoise.Modules.ScaleBias.Scale">
            <summary>
            Gets or sets the scaling factor to apply to the output value from the
            source module.
            </summary>
            <remarks>
            The <see cref="M:SharpNoise.Modules.ScaleBias.GetValue(System.Double,System.Double,System.Double)"/> method retrieves the output value from the source
            module, multiplies it with the scaling factor, adds the bias to
            it, then outputs the value.
            </remarks>
        </member>
        <member name="T:SharpNoise.Modules.Cache">
             <summary>
             Noise module that caches the last output value generated by a source
             module.
             </summary>
             <remarks>
             If an application passes an input value to the <see cref="M:SharpNoise.Modules.Cache.GetValue(System.Double,System.Double,System.Double)"/> method that
             differs from the previously passed-in input value, this noise module
             instructs the source module to calculate the output value.  This
             value, as well as the ( x, y, z ) coordinates of the input
             value, are stored (cached) in this noise module.
            
             If the application passes an input value to the <see cref="M:SharpNoise.Modules.Cache.GetValue(System.Double,System.Double,System.Double)"/> method
             that is equal to the previously passed-in input value, this noise
             module returns the cached output value without having the source
             module recalculate the output value.
            
             If an application passes a new source module to the <see cref="M:SharpNoise.Modules.Cache.SetSourceModule(System.Int32,SharpNoise.Modules.Module)"/>
             method, the cache is invalidated.
            
             Caching a noise module is useful if it is used as a source module for
             multiple noise modules.  If a source module is not cached, the source
             module will redundantly calculate the same output value once for each
             noise module in which it is included.
            
             This noise module requires one source module.
             </remarks>
        </member>
        <member name="M:SharpNoise.Modules.Cache.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Cache.GetValue(System.Double,System.Double,System.Double)">
            <summary>
            See the documentation on the base class.
            <seealso cref="T:SharpNoise.Modules.Module"/>
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <returns>Returns the computed value</returns>
        </member>
        <member name="P:SharpNoise.Modules.Cache.Source0">
            <summary>
            Gets or sets the first source module
            </summary>
        </member>
        <member name="T:SharpNoise.Models.Plane">
             <summary>
             Model that defines the surface of a plane.
             </summary>
             <remarks>
             This model returns an output value from a noise module given the
             coordinates of an input value located on the surface of an ( x,
             z ) plane.
            
             To generate an output value, pass the ( x, z ) coordinates of
             an input value to the GetValue() method.
            
             This model is useful for creating:
             - two-dimensional textures
             - terrain height maps for local areas
            
             This plane extends infinitely in both directions.
             </remarks>
        </member>
        <member name="M:SharpNoise.Models.Plane.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Models.Plane.#ctor(SharpNoise.Modules.Module)">
            <summary>
            Constructor.
            </summary>
            <param name="sourceModule">
            The noise module that is used to generate the output
            values.
            </param>
        </member>
        <member name="M:SharpNoise.Models.Plane.GetValue(System.Double,System.Double)">
            <summary>
            Returns the output value from the noise module given the
            ( x, z ) coordinates of the specified input value located
            on the surface of the plane.
            </summary>
            <param name="x">The x coordinate of the input value.</param>
            <param name="z">The z coordinate of the input value.</param>
            <returns>The output value from the noise module.</returns>
        </member>
        <member name="T:SharpNoise.NoiseQuality">
            <summary>
            Noise quality
            </summary>
        </member>
        <member name="F:SharpNoise.NoiseQuality.Fast">
            <summary>
            Generates coherent noise quickly.  When a coherent-noise function with
            this quality setting is used to generate a bump-map image, there are
            noticeable "creasing" artifacts in the resulting image.  This is
            because the derivative of that function is discontinuous at integer
            boundaries.
            </summary>
        </member>
        <member name="F:SharpNoise.NoiseQuality.Standard">
            <summary>
            Generates standard-quality coherent noise.  When a coherent-noise
            function with this quality setting is used to generate a bump-map
            image, there are some minor "creasing" artifacts in the resulting
            image.  This is because the second derivative of that function is
            discontinuous at integer boundaries.
            </summary>
        </member>
        <member name="F:SharpNoise.NoiseQuality.Best">
            <summary>
            Generates the best-quality coherent noise.  When a coherent-noise
            function with this quality setting is used to generate a bump-map
            image, there are no "creasing" artifacts in the resulting image.  This
            is because the first and second derivatives of that function are
            continuous at integer boundaries.
            </summary>
        </member>
        <member name="T:SharpNoise.Modules.Power">
             <summary>
             Noise module that raises the output value from a first source module
             to the power of the output value from a second source module.
             </summary>
             <remarks>
             The first source module must have an index value of 0.
             The second source module must have an index value of 1.
            
             This noise module requires two source modules.
             </remarks>
        </member>
        <member name="M:SharpNoise.Modules.Power.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Power.GetValue(System.Double,System.Double,System.Double)">
            <summary>
            See the documentation on the base class.
            <seealso cref="T:SharpNoise.Modules.Module"/>
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <returns>Returns the computed value</returns>
        </member>
        <member name="P:SharpNoise.Modules.Power.Source0">
            <summary>
            Gets or sets the first source module
            </summary>
        </member>
        <member name="P:SharpNoise.Modules.Power.Source1">
            <summary>
            Gets or sets the second source module
            </summary>
        </member>
        <member name="T:SharpNoise.Models.Sphere">
             <summary>
             Model that defines the surface of a sphere.
             </summary>
             <remarks>
             This model returns an output value from a noise module given the
             coordinates of an input value located on the surface of a sphere.
            
             To generate an output value, pass the (latitude, longitude)
             coordinates of an input value to the <see cref="M:SharpNoise.Models.Sphere.GetValue(System.Double,System.Double)"/> method.
            
             This model is useful for creating:
             - seamless textures that can be mapped onto a sphere
             - terrain height maps for entire planets
            
             This sphere has a radius of 1.0 unit and its center is located at
             the origin.
             </remarks>
        </member>
        <member name="M:SharpNoise.Models.Sphere.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Models.Sphere.#ctor(SharpNoise.Modules.Module)">
            <summary>
            Constructor.
            </summary>
            <param name="sourceModule">The noise module that is used to generate the output
            values.</param>
        </member>
        <member name="M:SharpNoise.Models.Sphere.GetValue(System.Double,System.Double)">
             <summary>
             Returns the output value from the noise module given the
             (latitude, longitude) coordinates of the specified input value
             located on the surface of the sphere.
             </summary>
             <param name="lat">The latitude of the input value, in degrees.</param>
             <param name="lon">The longitude of the input value, in degrees.</param>
             <returns>The output value from the noise module.</returns>
             <remarks>
             Use a negative latitude if the input value is located on the
             southern hemisphere.
            
             Use a negative longitude if the input value is located on the
             western hemisphere.
             </remarks>
        </member>
        <member name="T:SharpNoise.Builders.SphereNoiseMapBuilder">
             <summary>
             Builds a spherical noise map.
             </summary>
             <remarks>
             This class builds a noise map by filling it with coherent-noise values
             generated from the surface of a sphere.
            
             This class describes these input values using a (latitude, longitude)
             coordinate system.  After generating the coherent-noise value from the
             input value, it then "flattens" these coordinates onto a plane so that
             it can write the values into a two-dimensional noise map.
            
             The sphere model has a radius of 1.0 unit.  Its center is at the
             origin.
            
             The x coordinate in the noise map represents the longitude.  The y
             coordinate in the noise map represents the latitude.  
            
             The application must provide the southern, northern, western, and
             eastern bounds of the noise map, in degrees.
             </remarks>
        </member>
        <member name="M:SharpNoise.Builders.SphereNoiseMapBuilder.SetBounds(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the coordinate boundaries of the noise map.
            </summary>
            <param name="southLatBound">The southern boundary of the noise map, in
            degrees.</param>
            <param name="northLatBound">The northern boundary of the noise map, in
            degrees.</param>
            <param name="westLonBound">The western boundary of the noise map, in
            degrees.</param>
            <param name="eastLonBound">The eastern boundary of the noise map, in
            degrees.</param>
        </member>
        <member name="P:SharpNoise.Builders.SphereNoiseMapBuilder.EastLonBound">
            <summary>
            Gets the eastern boundary of the spherical noise map.
            </summary>
        </member>
        <member name="P:SharpNoise.Builders.SphereNoiseMapBuilder.NorthLatBound">
            <summary>
            Gets the northern boundary of the spherical noise map.
            </summary>
        </member>
        <member name="P:SharpNoise.Builders.SphereNoiseMapBuilder.WestLonBound">
            <summary>
            Gets the southern boundary of the spherical noise map.
            </summary>
        </member>
        <member name="P:SharpNoise.Builders.SphereNoiseMapBuilder.SouthLatBound">
            <summary>
            Gets the western boundary of the spherical noise map.
            </summary>
        </member>
        <member name="T:SharpNoise.Utilities.NoiseMap">
             <summary>
             Implements a noise map, a 2-dimensional array of floating-point
             values.
             </summary>
             <remarks>
             A noise map is designed to store coherent-noise values generated by a
             noise module, although it can store values from any source.  A noise
             map is often used as a terrain height map or a grayscale texture.
            
             The size (width and height) of the noise map can be specified during
             object construction or at any other time.
             
             All of the values outside of the noise map are assumed to have a
             common value known as the border value.
            
             To set the border value, modify the BorderValue property.
             </remarks>
        </member>
        <member name="M:SharpNoise.Utilities.NoiseMap.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Utilities.NoiseMap.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Utilities.NoiseMap.#ctor(SharpNoise.Utilities.NoiseMap)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:SharpNoise.Modules.RidgedMulti">
             <summary>
             Noise module that outputs 3-dimensional ridged-multifractal noise.
             </summary>
             <remarks>
             This noise module, heavily based on the Perlin-noise module, generates
             ridged-multifractal noise.  Ridged-multifractal noise is generated in
             much of the same way as Perlin noise, except the output of each octave
             is modified by an absolute-value function.  Modifying the octave
             values in this way produces ridge-like formations.
            
             Ridged-multifractal noise does not use a persistence value.  This is
             because the persistence values of the octaves are based on the values
             generated from from previous octaves, creating a feedback loop (or
             that's what it looks like after reading the code.)
            
             This noise module outputs ridged-multifractal-noise values that
             usually range from -1.0 to +1.0, but there are no guarantees that all
             output values will exist within that range.
            
             For ridged-multifractal noise generated with only one octave,
             the output value ranges from -1.0 to 0.0.
            
             Ridged-multifractal noise is often used to generate craggy mountainous
             terrain or marble-like textures.
            
             This noise module does not require any source modules.
            
             
             Octaves
            
             The number of octaves control the amount of detail of the
             ridged-multifractal noise.  Adding more octaves increases the detail
             of the ridged-multifractal noise, but with the drawback of increasing
             the calculation time.
            
             An application may specify the number of octaves that generate
             ridged-multifractal noise by modifying the OctaveCount property.
            
             Frequency
            
             An application may specify the frequency of the first octave by
             modifying the Frequency property.
            
             Lacunarity
            
             The lacunarity specifies the frequency multipler between successive
             octaves.
            
             The effect of modifying the lacunarity is subtle; you may need to play
             with the lacunarity value to determine the effects.  For best results,
             set the lacunarity to a number between 1.5 and 3.5.
            
             References &amp; Acknowledgments
            
             http://www.texturingandmodeling.com/Musgrave.html
             F. Kenton "Doc Mojo" Musgrave's texturing page - This page contains
             links to source code that generates ridged-multfractal noise, among
             other types of noise.  The source file
             http://www.texturingandmodeling.com/CODE/MUSGRAVE/CLOUD/fractal.c
             contains the code I used in my ridged-multifractal class.
             This code was written by F. Kenton Musgrave, the person who created
             http://www.pandromeda.com/.  He is also one of
             the authors in Texturing and Modeling: A Procedural Approach
             (Morgan Kaufmann, 2002. ISBN 1-55860-848-6.)
             </remarks>
        </member>
        <member name="F:SharpNoise.Modules.RidgedMulti.DefaultFrequency">
            <summary>
            Default frequency
            </summary>
        </member>
        <member name="F:SharpNoise.Modules.RidgedMulti.DefaultLacunarity">
            <summary>
            Default lacunarity
            </summary>
        </member>
        <member name="F:SharpNoise.Modules.RidgedMulti.DefaultOctaveCount">
            <summary>
            Default number of octaves
            </summary>
        </member>
        <member name="F:SharpNoise.Modules.RidgedMulti.DefaultQuality">
            <summary>
            Default noise quality
            </summary>
        </member>
        <member name="F:SharpNoise.Modules.RidgedMulti.DefaultSeed">
            <summary>
            Default noise seed
            </summary>
        </member>
        <member name="F:SharpNoise.Modules.RidgedMulti.MaxOctaves">
            <summary>
            Maximum allowed octave count
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.RidgedMulti.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.RidgedMulti.CalcSpectralWeights">
            <summary>
            Calculates the spectral weights for each octave.
            </summary>
        </member>
        <member name="P:SharpNoise.Modules.RidgedMulti.Frequency">
            <summary>
            Gets or sets the frequency of the first octave.
            </summary>
        </member>
        <member name="P:SharpNoise.Modules.RidgedMulti.Lacunarity">
            <summary>
            Gets or sets the lacunarity of the ridged-multifractal noise.
            </summary>
            <remarks>
            The lacunarity is the frequency multiplier between successive
            octaves.
            </remarks>
        </member>
        <member name="P:SharpNoise.Modules.RidgedMulti.Quality">
            <summary>
            Gets or sets the quality of the ridged-multifractal noise.
            </summary>
        </member>
        <member name="P:SharpNoise.Modules.RidgedMulti.OctaveCount">
            <summary>
            Gets or sets the number of octaves that generate the
            ridged-multifractal noise.
            </summary>
            <remarks>
            The number of octaves controls the amount of detail in the
            ridged-multifractal noise.
            </remarks>
        </member>
        <member name="P:SharpNoise.Modules.RidgedMulti.Seed">
            <summary>
            Gets or sets the seed value used by the ridged-multifractal-noise
            function.
            </summary>
        </member>
        <member name="T:SharpNoise.Modules.Checkerboard">
             <summary>
             Noise module that outputs a checkerboard pattern.
             </summary>
             <remarks>
             This noise module outputs unit-sized blocks of alternating values.
             The values of these blocks alternate between -1.0 and +1.0.
            
             This noise module is not really useful by itself, but it is often used
             for debugging purposes.
            
             This noise module does not require any source modules.
             </remarks>
        </member>
        <member name="M:SharpNoise.Modules.Checkerboard.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Checkerboard.GetValue(System.Double,System.Double,System.Double)">
            <summary>
            See the documentation on the base class.
            <seealso cref="T:SharpNoise.Modules.Module"/>
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <returns>Returns the computed value</returns>
        </member>
        <member name="T:SharpNoise.Modules.Clamp">
             <summary>
             Noise module that clamps the output value from a source module to a
             range of values.
             </summary>
             <remarks>
             The range of values in which to clamp the output value is called the
             clamping range.
            
             If the output value from the source module is less than the lower
             bound of the clamping range, this noise module clamps that value to
             the lower bound.  If the output value from the source module is
             greater than the upper bound of the clamping range, this noise module
             clamps that value to the upper bound.
            
             To specify the upper and lower bounds of the clamping range, call the
             <see cref="M:SharpNoise.Modules.Clamp.SetBounds(System.Double,System.Double)"/> method.
            
             This noise module requires one source module.
             </remarks>
        </member>
        <member name="F:SharpNoise.Modules.Clamp.DefaultLowerBound">
            <summary>
            Default lower bound of the clamping range
            </summary>
        </member>
        <member name="F:SharpNoise.Modules.Clamp.DefaultUpperBound">
            <summary>
            Default upper bound of the clamping range
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Clamp.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Clamp.SetBounds(System.Double,System.Double)">
            <summary>
            Sets the lower and upper bounds of the clamping range.
            </summary>
            <param name="lower">The lower bound.</param>
            <param name="upper">The upper bound.</param>
            <remarks>
            The lower bound must be less than or equal to the
            upper bound.
            
            If the output value from the source module is less than the lower
            bound of the clamping range, this noise module clamps that value
            to the lower bound.  If the output value from the source module
            is greater than the upper bound of the clamping range, this noise
            module clamps that value to the upper bound.
            </remarks>
        </member>
        <member name="M:SharpNoise.Modules.Clamp.GetValue(System.Double,System.Double,System.Double)">
            <summary>
            See the documentation on the base class.
            <seealso cref="T:SharpNoise.Modules.Module"/>
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <returns>Returns the computed value</returns>
        </member>
        <member name="P:SharpNoise.Modules.Clamp.LowerBound">
            <summary>
            Gets the lower bound of the clamping range.
            </summary>
            <remarks>
            If the output value from the source module is less than the lower
            bound of the clamping range, this noise module clamps that value
            to the lower bound.
            </remarks>
        </member>
        <member name="P:SharpNoise.Modules.Clamp.UpperBound">
            <summary>
            Gets the upper bound of the clamping range.
            </summary>
            <remarks>
            If the output value from the source module is greater than the
            upper bound of the clamping range, this noise module clamps that
            value to the upper bound.
            </remarks>
        </member>
        <member name="P:SharpNoise.Modules.Clamp.Source0">
            <summary>
            Gets or sets the first source module
            </summary>
        </member>
        <member name="T:SharpNoise.NoiseMath">
            <summary>
            Contains various interpolation methods, and other math helpers
            </summary>
        </member>
        <member name="F:SharpNoise.NoiseMath.Sqrt2">
            <summary>
            Square root of 2
            </summary>
        </member>
        <member name="F:SharpNoise.NoiseMath.Sqrt3">
            <summary>
            Square root of 3
            </summary>
        </member>
        <member name="F:SharpNoise.NoiseMath.DegToRad">
            <summary>
            Converts an angle from degrees to radians.
            </summary>
        </member>
        <member name="F:SharpNoise.NoiseMath.RadToDeg">
            <summary>
            Converts an angle from radians to degrees.
            </summary>
        </member>
        <member name="M:SharpNoise.NoiseMath.Cubic(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Performs cubic interpolation between two values bound between two other
            values.
            </summary>
            <param name="n0">The value before the first value.</param>
            <param name="n1">The first value.</param>
            <param name="n2">The second value.</param>
            <param name="n3">The value after the second value.</param>
            <param name="a">The alpha value.</param>
            <returns>The interpolated value.</returns>
            <remarks>
            The alpha value should range from 0.0 to 1.0.  If the alpha value is
            0.0, this function returns n1.  If the alpha value is 1.0, this
            function returns n2.
            </remarks>
        </member>
        <member name="M:SharpNoise.NoiseMath.Linear(System.Double,System.Double,System.Double)">
            <summary>
            Performs linear interpolation between two values.
            </summary>
            <param name="n0">The first value.</param>
            <param name="n1">The second value.</param>
            <param name="a">The alpha value.</param>
            <returns>The interpolated value.</returns>
            <remarks>
            The alpha value should range from 0.0 to 1.0.  If the alpha value is
            0.0, this function returns <paramref name="n0"/>.  If the alpha value is 1.0, this
            function returns <paramref name="n1"/>.
            </remarks>
        </member>
        <member name="M:SharpNoise.NoiseMath.SCurve3(System.Double)">
             <summary>
             Maps a value onto a cubic S-curve.
             </summary>
             <param name="a">The value to map onto a cubic S-curve.</param>
             <returns>The mapped value.</returns>
             <remarks>
             <paramref name="a"/> should range from 0.0 to 1.0.
            
             The derivitive of a cubic S-curve is zero at <paramref name="a"/> = 0.0 
             and <paramref name="a"/> = 1.0
             </remarks>
        </member>
        <member name="M:SharpNoise.NoiseMath.SCurve5(System.Double)">
             <summary>
             Maps a value onto a quintic S-curve.
             </summary>
             <param name="a">The value to map onto a quintic S-curve.</param>
             <returns>The mapped value.</returns>
             <remarks>
             The first derivitive of a quintic S-curve
             is zero at <paramref name="a"/> = 0.0 and
             <paramref name="a"/> = 1.0
            
             The second derivitive of a quintic S-curve
             is zero at <paramref name="a"/> = 0.0 and
             <paramref name="a"/> = 1.0
             </remarks>
        </member>
        <member name="M:SharpNoise.NoiseMath.LatLonToXYZ(System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts latitude/longitude coordinates on a unit sphere into 3D
            Cartesian coordinates.
            </summary>
            <param name="lat">The latitude, in degrees.</param>
            <param name="lon">The longitude, in degrees.</param>
            <param name="x">On exit, this parameter contains the x coordinate.</param>
            <param name="y">On exit, this parameter contains the y coordinate.</param>
            <param name="z">On exit, this parameter contains the z coordinate.</param>
            <remarks>
            <paramref name="lat"/> must range from -90 to +90.
            <paramref name="lon"/> must range from -180 to +180.
            </remarks>
        </member>
        <member name="M:SharpNoise.NoiseMath.Clamp``1(``0,``0,``0)">
            <summary>
            Clamps a value onto a clamping range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="lowerBound">The lower bound of the clamping range.</param>
            <param name="upperBound">The upper bound of the clamping range.</param>
            <returns>
            - <paramref name="value" /> if <paramref name="value" /> lies between <paramref name="lowerBound" /> and <paramref name="upperBound" />.
            - <paramref name="lowerBound" /> if <paramref name="value" /> is less than <paramref name="lowerBound" />.
            - <paramref name="upperBound" /> if <paramref name="value" /> is greater than <paramref name="upperBound" />.
            </returns>
        </member>
        <member name="M:SharpNoise.NoiseMath.Max``1(``0,``0)">
            <summary>
            Returns the maximum of two values.
            </summary>
            <typeparam name="T">A comparable type.</typeparam>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns>The maximum of the two values.</returns>
        </member>
        <member name="M:SharpNoise.NoiseMath.Min``1(``0,``0)">
            <summary>
            Returns the minimum of two values.
            </summary>
            <typeparam name="T">A comparable type.</typeparam>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns>The minimum of the two values.</returns>
        </member>
        <member name="M:SharpNoise.NoiseMath.Swap``1(``0@,``0@)">
            <summary>
            Swaps two values.
            </summary>
            <param name="a">A variable containing the first value.</param>
            <param name="b">A variable containing the second value.</param>
        </member>
        <member name="T:SharpNoise.Modules.Multiply">
            <summary>
            Noise module that outputs the product of the two output values from
            two source modules.
            </summary>
            <remarks>
            This noise module requires two source modules.
            </remarks>
        </member>
        <member name="M:SharpNoise.Modules.Multiply.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Multiply.GetValue(System.Double,System.Double,System.Double)">
            <summary>
            See the documentation on the base class.
            <seealso cref="T:SharpNoise.Modules.Module"/>
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <returns>Returns the computed value</returns>
        </member>
        <member name="P:SharpNoise.Modules.Multiply.Source0">
            <summary>
            Gets or sets the first source module
            </summary>
        </member>
        <member name="P:SharpNoise.Modules.Multiply.Source1">
            <summary>
            Gets or sets the second source module
            </summary>
        </member>
        <member name="T:SharpNoise.Modules.Spheres">
             <summary>
             Noise module that outputs concentric spheres.
             </summary>
             <remarks>
             This noise module outputs concentric spheres centered on the origin
             like the concentric rings of an onion.
            
             The first sphere has a radius of 1.0.  Each subsequent sphere has a
             radius that is 1.0 unit larger than the previous sphere.
            
             The output value from this noise module is determined by the distance
             between the input value and the the nearest spherical surface.  The
             input values that are located on a spherical surface are given the
             output value 1.0 and the input values that are equidistant from two
             spherical surfaces are given the output value -1.0.
            
             An application can change the frequency of the concentric spheres.
             Increasing the frequency reduces the distances between spheres.  To
             specify the frequency, modify the <see cref="P:SharpNoise.Modules.Spheres.Frequency"/> method.
            
             This noise module, modified with some low-frequency, low-power
             turbulence, is useful for generating agate-like textures.
            
             This noise module does not require any source modules. 
             </remarks>
        </member>
        <member name="F:SharpNoise.Modules.Spheres.DefaultFrequency">
            <summary>
            Default frequency value
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Spheres.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Spheres.GetValue(System.Double,System.Double,System.Double)">
            <summary>
            See the documentation on the base class.
            <seealso cref="T:SharpNoise.Modules.Module"/>
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <returns>Returns the computed value</returns>
        </member>
        <member name="P:SharpNoise.Modules.Spheres.Frequency">
            <summary>
            Gets or sets the frequency of the concentric spheres.
            </summary>
            <remarks>
            Increasing the frequency increases the density of the concentric
            spheres, reducing the distances between them.
            </remarks>
        </member>
        <member name="T:SharpNoise.Modules.Select">
             <summary>
             Noise module that outputs the value selected from one of two source
             modules chosen by the output value from a control module.
             </summary>
             <remarks>
             Unlike most other noise modules, the index value assigned to a source
             module determines its role in the selection operation:
             <list type="bullet">
             <item>
             <description>
             Source module 0 (upper left in the diagram) outputs a value.
             </description>
             </item>
             <item>
             <description>
             Source module 1 (lower left in the diagram) outputs a value.
             </description>
             </item>
             <item>
             <description>
             Source module 2 (bottom of the diagram) is known as the control
             module.  The control module determines the value to select.  If
             the output value from the control module is within a range of values
             known as the selection range, this noise module outputs the
             value from the source module with an index value of 1.  Otherwise,
             this noise module outputs the value from the source module with an
             index value of 0.
             </description>
             </item>
             </list>
             
             To specify the bounds of the selection range, call the SetBounds()
             method.
            
             An application can set the control module with the <see cref="P:SharpNoise.Modules.Select.Control"/>
             property instead of the <see cref="!:SetSourceModule"/> method.  This may make the
             application code easier to read.
            
             By default, there is an abrupt transition between the output values
             from the two source modules at the selection-range boundary.  To
             smooth the transition, pass a non-zero value to the <see cref="P:SharpNoise.Modules.Select.EdgeFalloff"/>
             method.  Higher values result in a smoother transition.
            
             This noise module requires three source modules.
             </remarks>
        </member>
        <member name="F:SharpNoise.Modules.Select.DefaultEdgeFalloff">
            <summary>
            Default edge-falloff value
            </summary>
        </member>
        <member name="F:SharpNoise.Modules.Select.DefaultLowerBound">
            <summary>
            Default lower bound of the selection range
            </summary>
        </member>
        <member name="F:SharpNoise.Modules.Select.DefaultUpperBound">
            <summary>
            Default upper bound of the selection range
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Select.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Select.SetBounds(System.Double,System.Double)">
            <summary>
            Sets the lower and upper bounds of the selection range.
            </summary>
            <param name="lower">The lower bound.</param>
            <param name="upper">The upper bound.</param>
            <remarks>
            The lower bound must be less than or equal to the upper
            bound.
            
            If the output value from the control module is within the
            selection range, the <see cref="M:SharpNoise.Modules.Select.GetValue(System.Double,System.Double,System.Double)"/> method outputs the value from the
            source module with an index value of 1.  Otherwise, this method
            outputs the value from the source module with an index value of 0.
            </remarks>
        </member>
        <member name="M:SharpNoise.Modules.Select.GetValue(System.Double,System.Double,System.Double)">
            <summary>
            See the documentation on the base class.
            <seealso cref="T:SharpNoise.Modules.Module"/>
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <returns>Returns the computed value</returns>
        </member>
        <member name="P:SharpNoise.Modules.Select.EdgeFalloff">
             <summary>
             Gets or sets the falloff value at the edge transition.
             </summary>
             <remarks>
             The falloff value is the width of the edge transition at either
             edge of the selection range.
            
             By default, there is an abrupt transition between the output
             values from the two source modules at the selection-range
             boundary.
             
             For example, if the selection range is 0.5 to 0.8, and the edge
             falloff value is 0.1, then the <see cref="M:SharpNoise.Modules.Select.GetValue(System.Double,System.Double,System.Double)"/> method outputs:
             <list type="bullet">
             <item>
             <description>
             the output value from the source module with an index value of 0
             if the output value from the control module is less than 0.4
             ( = 0.5 - 0.1).
             </description>
             </item>
             <item>
             <description>
             a linear blend between the two output values from the two source
             modules if the output value from the control module is between
             0.4 ( = 0.5 - 0.1) and 0.6 ( = 0.5 + 0.1).
             </description>
             </item>
             <item>
             <description>
             the output value from the source module with an index value of 1
             if the output value from the control module is between 0.6
             ( = 0.5 + 0.1) and 0.7 ( = 0.8 - 0.1).
             </description>
             </item>
             <item>
             <description>
             a linear blend between the output values from the two source
             modules if the output value from the control module is between
             0.7 ( = 0.8 - 0.1 ) and 0.9 ( = 0.8 + 0.1).
             </description>
             </item>
             <item>
             <description>
             the output value from the source module with an index value of 0
             if the output value from the control module is greater than 0.9
             ( = 0.8 + 0.1).
             </description>
             </item>
             </list>
             
             This module requires a total of 3 source modules: 2 sources and 1 control module.
             </remarks>
        </member>
        <member name="P:SharpNoise.Modules.Select.LowerBound">
            <summary>
            Gets or sets the lower bound of the selection range.
            </summary>
            <remarks>
            If the output value from the control module is within the
            selection range, the <see cref="M:SharpNoise.Modules.Select.GetValue(System.Double,System.Double,System.Double)"/> method outputs the value from the
            source module with an index value of 1.  Otherwise, this method
            outputs the value from the source module with an index value of 0.
            </remarks>
        </member>
        <member name="P:SharpNoise.Modules.Select.UpperBound">
            <summary>
            Gets or sets the upper bound of the selection range.
            </summary>
            <remarks>
            If the output value from the control module is within the
            selection range, the <see cref="M:SharpNoise.Modules.Select.GetValue(System.Double,System.Double,System.Double)"/> method outputs the value from the
            source module with an index value of 1.  Otherwise, this method
            outputs the value from the source module with an index value of 0.
            </remarks>
        </member>
        <member name="P:SharpNoise.Modules.Select.Source0">
            <summary>
            Gets or sets the first source module
            </summary>
        </member>
        <member name="P:SharpNoise.Modules.Select.Source1">
            <summary>
            Gets or sets the second source module
            </summary>
        </member>
        <member name="P:SharpNoise.Modules.Select.Control">
            <summary>
            Gets or sets the control module.
            </summary>
            <remarks>
            The control module determines the output value to select.  If the
            output value from the control module is within a range of values
            known as the selection range, the <see cref="M:SharpNoise.Modules.Select.GetValue(System.Double,System.Double,System.Double)"/> method outputs
            the value from the source module with an index value of 1.
            Otherwise, this method outputs the value from the source module
            with an index value of 0.
            </remarks>
        </member>
        <member name="T:SharpNoise.Modules.Blend">
             <summary>
             Noise module that outputs a weighted blend of the output values from
             two source modules given the output value supplied by a control module.
             </summary>
             <remarks>
             <para>
             Unlike most other noise modules, the index value assigned to a source
             module determines its role in the blending operation:
             <list type="bullet">
             <item>
             <description>
             Source module 0 (upper left in the diagram) outputs one of the
               values to blend.
             </description>
             </item>
             <item>
             <description>
             Source module 1 (lower left in the diagram) outputs one of the
               values to blend.
             </description>
             </item>
             <item>
             <description>
             Source module 2 (bottom of the diagram) is known as the control
             module. The control module determines the weight of the
             blending operation. Negative values weigh the blend towards the
             output value from the source module with an index value of 0.
             Positive values weigh the blend towards the output value from the
             source module with an index value of 1.
             </description>
             </item>
             </list>
             </para>
             
             An application can set the control module with the <see cref="!:ControlModule"/>
             property instead of the <see cref="!:SetSourceModule"/> method.  This may make the
             application code easier to read.
            
             This noise module uses linear interpolation to perform the blending
             operation.
            
             This noise module requires three source modules.
             </remarks>
        </member>
        <member name="M:SharpNoise.Modules.Blend.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Blend.GetValue(System.Double,System.Double,System.Double)">
            <summary>
            See the documentation on the base class.
            <seealso cref="T:SharpNoise.Modules.Module"/>
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <returns>Returns the computed value</returns>
        </member>
        <member name="P:SharpNoise.Modules.Blend.Source0">
            <summary>
            Gets or sets the first source module
            </summary>
        </member>
        <member name="P:SharpNoise.Modules.Blend.Source1">
            <summary>
            Gets or sets the second source module
            </summary>
        </member>
        <member name="P:SharpNoise.Modules.Blend.Control">
            <summary>
            Gets or sets the control module
            </summary>
        </member>
        <member name="T:SharpNoise.Modules.Billow">
             <summary>
             Noise module that outputs three-dimensional "billowy" noise.
             </summary>
             <remarks>
             This noise module generates "billowy" noise suitable for clouds and
             rocks.
            
             This noise module is nearly identical to Perlin except
             this noise module modifies each octave with an absolute-value
             function.  See the documentation of Perlin for more
             information.
             <seealso cref="T:SharpNoise.Modules.Perlin"/>
             </remarks>
        </member>
        <member name="F:SharpNoise.Modules.Billow.DefaultFrequency">
            <summary>
            Default frequency
            </summary>
        </member>
        <member name="F:SharpNoise.Modules.Billow.DefaultLacunarity">
            <summary>
            Default lacunarity
            </summary>
        </member>
        <member name="F:SharpNoise.Modules.Billow.DefaultOctaveCount">
            <summary>
            Default number of octaves
            </summary>
        </member>
        <member name="F:SharpNoise.Modules.Billow.DefaultPersistence">
            <summary>
            Default persistence value
            </summary>
        </member>
        <member name="F:SharpNoise.Modules.Billow.DefaultQuality">
            <summary>
            Default noise quality
            </summary>
        </member>
        <member name="F:SharpNoise.Modules.Billow.DefaultSeed">
            <summary>
            Default noise seed
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Billow.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SharpNoise.Modules.Billow.GetValue(System.Double,System.Double,System.Double)">
            <summary>
            See the documentation on the base class.
            <seealso cref="T:SharpNoise.Modules.Module"/>
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <returns>Returns the computed value</returns>
        </member>
        <member name="P:SharpNoise.Modules.Billow.Frequency">
            <summary>
            Gets or sets the frequency of the first octave.
            </summary>
        </member>
        <member name="P:SharpNoise.Modules.Billow.Lacunarity">
            <summary>
            Gets or sets the lacunarity of the billowy noise.
            </summary>
            <remarks>
            The lacunarity is the frequency multiplier between successive
            octaves.
            </remarks>
        </member>
        <member name="P:SharpNoise.Modules.Billow.Quality">
            <summary>
            Gets or sets the quality of the billowy noise.
            </summary>
            <remarks>
            See <see cref="T:SharpNoise.NoiseQuality"/> for definitions of the various
            coherent-noise qualities.
            </remarks>
        </member>
        <member name="P:SharpNoise.Modules.Billow.OctaveCount">
            <summary>
            Gets or sets the number of octaves that generate the billowy noise.
            </summary>
            <remarks>
            The number of octaves controls the amount of detail in the billowy
            noise.
            </remarks>
        </member>
        <member name="P:SharpNoise.Modules.Billow.Persistence">
            <summary>
            Gets or sets the persistence value of the billowy noise.
            </summary>
            <remarks>
            The persistence value controls the roughness of the billowy noise.
            </remarks>
        </member>
        <member name="P:SharpNoise.Modules.Billow.Seed">
            <summary>
            Gets or sets the seed value used by the billowy-noise function.
            </summary>
        </member>
    </members>
</doc>
